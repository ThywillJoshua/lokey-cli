{
    "pipes": [
        {
            "name": "FormErrorMessagePipe",
            "id": "pipe-FormErrorMessagePipe-961a4764e293173a63cb6e1eb7978ba9f837f7479608766c06f7a7d49c45901d7c6381045a8b40fc6f1af263da3844d9fe9c023722eee796e94c64a2095fb1c6",
            "file": "src/app/shared/pipes/form-error-message.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "pure": false,
            "ngname": "formErrorMessage",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\n@Pipe({\n  standalone: true,\n  name: 'formErrorMessage',\n  pure: false,\n})\nexport class FormErrorMessagePipe implements PipeTransform {\n  transform(control: AbstractControl | null): string {\n    if (!control || !control.errors || !(control.dirty || control.touched)) {\n      return '';\n    }\n\n    const errors: any = control.errors;\n\n    if (errors.required) {\n      return 'This field is required.';\n    }\n    if (errors.minlength) {\n      return `Minimum length is ${errors.minlength.requiredLength} characters. You have entered ${errors.minlength.actualLength}.`;\n    }\n    if (errors.maxlength) {\n      return `Maximum length is ${errors.maxlength.requiredLength} characters. You have entered ${errors.maxlength.actualLength}.`;\n    }\n    if (errors.email) {\n      return 'Invalid email address format.';\n    }\n    if (errors.pattern) {\n      return 'Invalid format.';\n    }\n    if (errors.min) {\n      return `Minimum value allowed is ${errors.min.min}. You entered ${errors.min.actual}.`;\n    }\n    if (errors.max) {\n      return `Maximum value allowed is ${errors.max.max}. You entered ${errors.max.actual}.`;\n    }\n    if (errors.requiredTrue) {\n      return 'This field must be checked.';\n    }\n    if (errors.date) {\n      return 'Invalid date.';\n    }\n    if (errors.matchPassword) {\n      return 'Passwords do not match.';\n    }\n    if (errors.unique) {\n      return 'This value must be unique.';\n    }\n    if (errors.ageRange) {\n      return `Age must be between ${errors.ageRange.min} and ${errors.ageRange.max}. You entered ${errors.ageRange.actual}.`;\n    }\n\n    // Handle custom validators\n    if (errors.specialChars) {\n      return 'Special characters are not allowed.';\n    }\n    if (errors.url) {\n      return 'Invalid URL.';\n    }\n    if (errors.phone) {\n      return 'Invalid phone number.';\n    }\n    if (errors.alphaNumeric) {\n      return 'Only alphanumeric characters are allowed.';\n    }\n\n    return 'Invalid value.';\n  }\n}\n"
        },
        {
            "name": "LocalizePipe",
            "id": "pipe-LocalizePipe-f5d8ec395fb3788b7dc9af6b76308f3f4563ed84b84f31c1d24644743b23ab39702492278acb1398212ada20ed6b9339f23dae479d224425c0539bf15025a0d9",
            "file": "src/app/shared/pipes/localize.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "this.languageService.currentLanguage()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "languageService",
                    "defaultValue": "inject(LanguageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "pure": false,
            "ngname": "localize",
            "sourceCode": "import { Pipe, PipeTransform, inject } from '@angular/core';\nimport { LanguageService } from '../services/language/language.service';\n\n@Pipe({ name: 'localize', pure: false, standalone: true })\nexport class LocalizePipe implements PipeTransform {\n  private languageService = inject(LanguageService);\n  currentLanguage = this.languageService.currentLanguage();\n\n  transform(input: { key: string; value: string }[]): string {\n    if (!input) {\n      return 'No input provided';\n    }\n\n    return (\n      input.find((obj) => obj.key === this.currentLanguage)?.value ||\n      'Data not found'\n    );\n  }\n}\n"
        },
        {
            "name": "TranslatePipe",
            "id": "pipe-TranslatePipe-25d01c944d672ffb82cf9999d7ebefb2d66044eec1c8e9c08c4275cb8b931c4a140636f3c71cd64ced8d666b8062b1692710ec07e5b899105372e15b2806aeca",
            "file": "src/app/shared/services/translate/pipes/translate.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "translationService",
                    "defaultValue": "inject(TranslateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "pure": false,
            "ngname": "translate",
            "sourceCode": "import { Pipe, PipeTransform, inject } from \"@angular/core\";\r\nimport { TranslateService } from \"../services/translate.service\";\r\n\r\n@Pipe({ name: \"translate\", pure: false, standalone: true })\r\nexport class TranslatePipe implements PipeTransform {\r\n  private translationService = inject(TranslateService);\r\n\r\n  transform(\r\n    input: string | null | undefined,\r\n    values?: Record<string, any>\r\n  ): string {\r\n    if (!input) {\r\n      return \"\";\r\n    }\r\n\r\n    return this.translationService.translate(input, values);\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "IAuthConfig",
            "id": "interface-IAuthConfig-da6a4de63247fd8aa311d3395a84251d6621b1496a4a91c674e7bd3cd48d18947a885fdc20ac6d0bd0576ef2ce2a51a836424e617e9cf74e60c06ff3e113591f",
            "file": "src/app/shared/services/auth/model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAuthConfig {\n  authToken: string;\n  tenantId: string;\n}\n\nexport interface ITokens {\n  access_token: string;\n  refresh_token: string;\n}\n",
            "properties": [
                {
                    "name": "authToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "tenantId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICreateOrganizationForm",
            "id": "interface-ICreateOrganizationForm-f0f32c6d289adb3553066e91c0a0e2c49275cbf43d4ccff194239c952d7a7221326e94610e6910c9067a9858a4fd8ee5f81f2417db8389d542bf25b6b4f92fa1",
            "file": "src/app/containers/organizations/create-organization/create-organization.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICreateOrganizationForm {\n  organizationName: string;\n  manualUserImport: boolean;\n  useIDP: boolean;\n  identityProvider: string;\n  domainName: string;\n  authenticationMethod: string;\n  clientID: string;\n  clientSecret: string;\n  tokenEndpoint: string;\n  userInfoEndpoint: string;\n  members: IMember[];\n}\n\nexport interface IMember {\n  email: string;\n  name: string;\n  isAdmin: boolean;\n}\n",
            "properties": [
                {
                    "name": "authenticationMethod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "clientID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "clientSecret",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "domainName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "identityProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "manualUserImport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMember[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "organizationName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "tokenEndpoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "useIDP",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userInfoEndpoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICreateOrganizationForm",
            "id": "interface-ICreateOrganizationForm-f0f32c6d289adb3553066e91c0a0e2c49275cbf43d4ccff194239c952d7a7221326e94610e6910c9067a9858a4fd8ee5f81f2417db8389d542bf25b6b4f92fa1-1",
            "file": "src/app/containers/organizations/organization/add-members/add-members.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICreateOrganizationForm {\n  organizationName: string;\n  manualUserImport: boolean;\n  useIDP: boolean;\n  identityProvider: string;\n  domainName: string;\n  authenticationMethod: string;\n  clientID: string;\n  clientSecret: string;\n  tokenEndpoint: string;\n  userInfoEndpoint: string;\n  members: IMember[];\n}\n\nexport interface IMember {\n  email: string;\n  name: string;\n  isAdmin: boolean;\n}\n",
            "properties": [
                {
                    "name": "authenticationMethod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "clientID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "clientSecret",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "domainName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "identityProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "manualUserImport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMember[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "organizationName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "tokenEndpoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "useIDP",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userInfoEndpoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ICreateOrganizationForm-1"
        },
        {
            "name": "IGetTranslation",
            "id": "interface-IGetTranslation-e88c5e574ef497cac7c60a4c78952a450c9721972a3884ff315ccf68a9a262b3884f98cd1f0b30fadc419da6903f9eee242554ad0dff1334814e208620458897",
            "file": "src/app/shared/services/translate/models/translate.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITranslateConfig {\r\n  initialUrl: string;\r\n}\r\n\r\nexport interface IGetTranslation {\r\n  translation: string;\r\n  found: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "found",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "translation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IMember",
            "id": "interface-IMember-f0f32c6d289adb3553066e91c0a0e2c49275cbf43d4ccff194239c952d7a7221326e94610e6910c9067a9858a4fd8ee5f81f2417db8389d542bf25b6b4f92fa1",
            "file": "src/app/containers/organizations/create-organization/create-organization.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICreateOrganizationForm {\n  organizationName: string;\n  manualUserImport: boolean;\n  useIDP: boolean;\n  identityProvider: string;\n  domainName: string;\n  authenticationMethod: string;\n  clientID: string;\n  clientSecret: string;\n  tokenEndpoint: string;\n  userInfoEndpoint: string;\n  members: IMember[];\n}\n\nexport interface IMember {\n  email: string;\n  name: string;\n  isAdmin: boolean;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isAdmin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IMember",
            "id": "interface-IMember-f0f32c6d289adb3553066e91c0a0e2c49275cbf43d4ccff194239c952d7a7221326e94610e6910c9067a9858a4fd8ee5f81f2417db8389d542bf25b6b4f92fa1-1",
            "file": "src/app/containers/organizations/organization/add-members/add-members.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICreateOrganizationForm {\n  organizationName: string;\n  manualUserImport: boolean;\n  useIDP: boolean;\n  identityProvider: string;\n  domainName: string;\n  authenticationMethod: string;\n  clientID: string;\n  clientSecret: string;\n  tokenEndpoint: string;\n  userInfoEndpoint: string;\n  members: IMember[];\n}\n\nexport interface IMember {\n  email: string;\n  name: string;\n  isAdmin: boolean;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isAdmin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IMember-1"
        },
        {
            "name": "IStorage",
            "id": "interface-IStorage-e7d509e6cacbafd8f2dc88d0b84060a74f397efe437eca438a7da09860a68e10dede9dc5a7b76df35fe66626e45b0eb8d3d576543944b5ee5a96d66026950afb",
            "file": "src/app/shared/services/storage/storage.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICreateOrganizationForm } from '../../../containers/organizations/create-organization/create-organization.models';\n\nexport interface IUserProfile {\n  email: string;\n  name?: string;\n}\n\nexport interface IStorage {\n  'echo.tokens': {\n    access_token: string;\n    refresh_token: string;\n  };\n  'echo.user': IUserProfile;\n  'echo.create-organization-form': ICreateOrganizationForm;\n}\n",
            "properties": [
                {
                    "name": "echo.create-organization-form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICreateOrganizationForm",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "echo.tokens",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "echo.user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserProfile",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IToast",
            "id": "interface-IToast-f720879632c09f7533d62018847e91863287a3dbb93a23677e23b06e18c06b504a9a0fef1cb522bb0563f6aa472203424d8513976e0e618a8a6ffd0677522edb",
            "file": "src/app/shared/containers/toast/toast.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\n\ninterface IToast {\n  message: string;\n  correlation_id?: string;\n  dateTime: Date;\n  duration: number;\n  type: 'success' | 'error' | 'warning';\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToastService {\n  toasts = signal<IToast[]>([]);\n  isOpen = signal(false);\n  private closeTimeoutId: ReturnType<typeof setTimeout> | null = null;\n\n  add(\n    message: string,\n    correlation_id?: string,\n    type: IToast['type'] = 'success',\n    duration = 300000,\n    dateTime = new Date()\n  ) {\n    const toast: IToast = { message, duration, dateTime, type, correlation_id };\n    this.toasts.update((toasts) => [...toasts, toast]);\n    setTimeout(() => this.remove(0), duration);\n\n    this.setIsOpen(true);\n  }\n\n  remove(index: number) {\n    this.toasts.update((toasts) => toasts.filter((_, i) => i !== index));\n    if (this.toasts().length === 0) {\n      this.setIsOpen(false);\n    }\n  }\n\n  clear() {\n    this.toasts.update(() => []);\n    this.setIsOpen(false);\n  }\n\n  setIsOpen(state: boolean) {\n    if (state) {\n      this.isOpen.set(true);\n      this.resetCloseTimeout();\n    } else {\n      this.isOpen.set(false);\n      this.clearCloseTimeout();\n    }\n  }\n\n  private resetCloseTimeout() {\n    this.clearCloseTimeout();\n    this.closeTimeoutId = setTimeout(() => this.isOpen.set(false), 30000);\n  }\n\n  private clearCloseTimeout() {\n    if (this.closeTimeoutId !== null) {\n      clearTimeout(this.closeTimeoutId);\n      this.closeTimeoutId = null;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "correlation_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"error\" | \"warning\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITokens",
            "id": "interface-ITokens-da6a4de63247fd8aa311d3395a84251d6621b1496a4a91c674e7bd3cd48d18947a885fdc20ac6d0bd0576ef2ce2a51a836424e617e9cf74e60c06ff3e113591f",
            "file": "src/app/shared/services/auth/model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAuthConfig {\n  authToken: string;\n  tenantId: string;\n}\n\nexport interface ITokens {\n  access_token: string;\n  refresh_token: string;\n}\n",
            "properties": [
                {
                    "name": "access_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "refresh_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITranslateConfig",
            "id": "interface-ITranslateConfig-e88c5e574ef497cac7c60a4c78952a450c9721972a3884ff315ccf68a9a262b3884f98cd1f0b30fadc419da6903f9eee242554ad0dff1334814e208620458897",
            "file": "src/app/shared/services/translate/models/translate.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITranslateConfig {\r\n  initialUrl: string;\r\n}\r\n\r\nexport interface IGetTranslation {\r\n  translation: string;\r\n  found: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "initialUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IUserProfile",
            "id": "interface-IUserProfile-e7d509e6cacbafd8f2dc88d0b84060a74f397efe437eca438a7da09860a68e10dede9dc5a7b76df35fe66626e45b0eb8d3d576543944b5ee5a96d66026950afb",
            "file": "src/app/shared/services/storage/storage.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICreateOrganizationForm } from '../../../containers/organizations/create-organization/create-organization.models';\n\nexport interface IUserProfile {\n  email: string;\n  name?: string;\n}\n\nexport interface IStorage {\n  'echo.tokens': {\n    access_token: string;\n    refresh_token: string;\n  };\n  'echo.user': IUserProfile;\n  'echo.create-organization-form': ICreateOrganizationForm;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-3fe8279af2631b9f5a9511207ee34c43496e7d8e63078cc95a2748d44751876e2737f49c448e42e049bab2255f9e24809ae79fd5537360377c53723f201ac8bc",
            "file": "src/app/shared/services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isAuthed",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "localStorageService",
                    "defaultValue": "inject(LocalStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "userProfile",
                    "defaultValue": "this.localStorageService.watch<IUserProfile>('echo.user')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "completeLogin",
                    "args": [
                        {
                            "name": "user_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "otp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAccessTokenExpired",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshAccessToken",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startLogin",
                    "args": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateToken",
                    "args": [
                        {
                            "name": "authConfig",
                            "type": "IAuthConfig | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "authConfig",
                            "type": "IAuthConfig | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyEmail",
                    "args": [
                        {
                            "name": "user_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "otp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, signal } from '@angular/core';\nimport { IAuthConfig, ITokens } from './model';\nimport { Router } from '@angular/router';\nimport { env } from '../../../../environments/environment';\nimport { tap } from 'rxjs';\nimport { LocalStorageService } from '../storage/local-storage.service';\nimport { IStorage, IUserProfile } from '../storage/storage.model';\nimport { getRouterLink } from '../custom-routing/constants';\nimport { PATHS } from '../../../app.routes';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  http = inject(HttpClient);\n  router = inject(Router);\n  localStorageService = inject(LocalStorageService);\n\n  isAuthed = signal(false);\n\n  userProfile = this.localStorageService.watch<IUserProfile>('echo.user');\n\n  validateToken(authConfig: IAuthConfig | undefined): void {\n    if (!authConfig?.authToken) {\n      console.error('Echo: No auth token provided');\n      return;\n    }\n  }\n\n  register(_id: string, name: string) {\n    return this.http.post(env.backendApi + '/register', { _id, name });\n  }\n\n  verifyEmail(user_id: string, otp: string) {\n    return this.http.post(env.backendApi + '/verify-email', { user_id, otp });\n  }\n\n  startLogin(_id: string) {\n    return this.http.post(env.backendApi + '/start-login', { _id });\n  }\n\n  completeLogin(user_id: string, otp: string) {\n    return this.http\n      .post<ITokens>(env.backendApi + '/complete-login', { user_id, otp })\n      .pipe(\n        tap((response: any) => {\n          this.localStorageService.set('echo.user', response.user_profile);\n          this.localStorageService.set('echo.tokens', response.tokens);\n          this.isAuthed.set(true);\n        })\n      );\n  }\n\n  refreshAccessToken(email: string) {\n    const refresh_token =\n      this.localStorageService.get<IStorage['echo.tokens']>(\n        'echo.tokens'\n      )?.refresh_token;\n    return this.http\n      .post<ITokens>(env.backendApi + '/refreshToken', { email, refresh_token })\n      .pipe(\n        tap((tokens: any) => {\n          this.localStorageService.set('echo.tokens', tokens);\n          this.isAuthed.set(true);\n        })\n      );\n  }\n\n  isAccessTokenExpired() {\n    const accessToken =\n      this.localStorageService.get<IStorage['echo.tokens']>(\n        'echo.tokens'\n      )?.access_token;\n\n    if (!accessToken) {\n      return true;\n    }\n\n    const payload = JSON.parse(atob(accessToken.split('.')[1]));\n    return payload.exp * 1000 < Date.now();\n  }\n\n  logout() {\n    this.localStorageService.clear();\n    this.router.navigate(getRouterLink(PATHS.LOGIN));\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BreadcrumbService",
            "id": "injectable-BreadcrumbService-c441b71662e4ef1169ddac9b542cba73ea179606d57d9b01b8b3b0700a51f2c6f7a54f15161a49d9403efedb3433778bc714aeb1b9696a2b6bdf7f22fe52ba47",
            "file": "src/app/shared/services/custom-routing/breadcrumb/breadcrumb.service.ts",
            "properties": [
                {
                    "name": "breadcrumbs",
                    "defaultValue": "signal<string[]>(['home'])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "clearBreadcrumbs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPathFromSegment",
                    "args": [
                        {
                            "name": "segment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "segment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBreadcrumbs",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\nimport { ROUTER_NAME } from '../constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbService {\n  breadcrumbs = signal<string[]>(['home']);\n\n  getPathFromSegment(segment: string): string {\n    const dynamicRegex = new RegExp(`\\\\(${ROUTER_NAME}:([^\\\\)]+)\\\\)`);\n    const match = segment.match(dynamicRegex);\n    return match ? match[1] : segment;\n  }\n\n  updateBreadcrumbs(path: string): void {\n    // console.log(`Updating breadcrumbs for path: ${path}`);\n    const newPath = this.getPathFromSegment(path);\n\n    if (newPath) {\n      this.breadcrumbs.set(newPath.split('/'));\n    }\n  }\n\n  clearBreadcrumbs(): void {\n    this.breadcrumbs.set([]);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CustomLocationStrategy",
            "id": "injectable-CustomLocationStrategy-1bd685932099f8c2533b4cd6b931aee51da5256942f1b5f2de69134f98f1d83a5a0b5806dc7ca16057818f520b70a9f15b0c4ba7915a21aabecbf5b3af11fcf2",
            "file": "src/app/shared/services/custom-routing/custom-location-strategy/custom-location-strategy.service.ts",
            "properties": [
                {
                    "name": "breadcrumbService",
                    "defaultValue": "inject(BreadcrumbService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "back",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ]
                },
                {
                    "name": "forward",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ]
                },
                {
                    "name": "getBaseHref",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ]
                },
                {
                    "name": "getState",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ]
                },
                {
                    "name": "onPopState",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "event",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "event",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "path",
                    "args": [
                        {
                            "name": "includeHash",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "includeHash",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prepareExternalUrl",
                    "args": [
                        {
                            "name": "internal",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "internal",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pushState",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replaceState",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { HashLocationStrategy } from '@angular/common';\nimport { BreadcrumbService } from '../breadcrumb/breadcrumb.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomLocationStrategy extends HashLocationStrategy {\n  breadcrumbService = inject(BreadcrumbService);\n\n  // Returns the current path\n  override path(includeHash: boolean = false): string {\n    // console.log('Current path requested');\n    return '';\n  }\n\n  // Prepares the internal URL to be external if needed\n  override prepareExternalUrl(internal: string): string {\n    // console.log(`Preparing external URL: ${internal}`);\n    return internal;\n  }\n\n  // Handles push state navigation without altering the browser's address bar\n  override pushState(\n    state: any,\n    title: string,\n    url: string,\n    queryParams: string\n  ): void {\n    this.breadcrumbService.updateBreadcrumbs(url);\n    // console.log(`Navigation inside custom element: ${url}`);\n  }\n\n  // Handles replacing the current state without altering the browser's address bar\n  override replaceState(\n    state: any,\n    title: string,\n    url: string,\n    queryParams: string\n  ): void {\n    // console.log(`Replacing state inside custom element: ${url}`);\n  }\n\n  // No-op for forward navigation\n  override forward(): void {\n    // console.log('Forward navigation triggered');\n  }\n\n  // No-op for back navigation\n  override back(): void {\n    // console.log('Back navigation triggered');\n  }\n\n  // Returns the current state\n  override getState(): any {\n    // console.log('Getting current state');\n    return null;\n  }\n\n  // No-op for pop state events\n  override onPopState(fn: (event: any) => void): void {\n    // console.log('Pop state triggered');\n  }\n\n  // Returns the base href\n  override getBaseHref(): string {\n    // console.log('Getting base href');\n    return '';\n  }\n}\n",
            "extends": [
                "HashLocationStrategy"
            ],
            "type": "injectable"
        },
        {
            "name": "LanguageService",
            "id": "injectable-LanguageService-6fbc529e057e7f9bec01b89f07aea32daa71744df7688ff1bc952cbaaa023823ffa2e969f80577cbfa9a6e04089fa96469b6a960c674d7006c45c2ffb9f598a8",
            "file": "src/app/shared/services/language/language.service.ts",
            "properties": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "signal('en')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "translateService",
                    "defaultValue": "inject(TranslateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable, signal } from '@angular/core';\nimport { TranslateService } from '../translate/services/translate.service';\n\nexport const SUPPORTED_LANGUAGES = [\n  { key: 'LANGUAGES.ENGLISH', value: 'en' },\n  { key: 'LANGUAGES.GERMAN', value: 'de' },\n];\n\n@Injectable({ providedIn: 'root' })\nexport class LanguageService {\n  currentLanguage = signal('en');\n  translateService = inject(TranslateService);\n\n  changeLanguage(lang: string) {\n    this.translateService.updateUrl(`assets/i18n/${lang}.json`);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LoadingScreenService",
            "id": "injectable-LoadingScreenService-46600f0d410430deb2ebbcfe2ad95c1dfd924052443767b04ba842db995f167ea06d71a817b0e1f2d2ae9dc388da5f94c6fc6c1edf662bc589606dd8feae4769",
            "file": "src/app/shared/containers/loading-screen/loading-screen.service.ts",
            "properties": [
                {
                    "name": "isLoading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScreenService {\n  isLoading = signal(false);\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-ec3a975e095f2d90db2ee127e877366a9be4481285e2060b6d2a05798dc9c516950994ab80c4e2a37605af45b652b4adb2588b74864884fdeca536e94952a1aa",
            "file": "src/app/shared/services/storage/local-storage.service.ts",
            "properties": [
                {
                    "name": "signals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | WritableSignal<any>>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "storage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Storage",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "watch",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "WritableSignal | undefined",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { StorageService } from './storage.service';\n\n@Injectable({ providedIn: 'root' })\nexport class LocalStorageService extends StorageService {\n  constructor() {\n    const w = typeof window === 'undefined' ? null : window.localStorage;\n    super(w);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 5
            },
            "extends": [
                "StorageService"
            ],
            "type": "injectable"
        },
        {
            "name": "MockTranslateService",
            "id": "injectable-MockTranslateService-0ad904c852cb65e03eb24337c212f9ffe9aaa5c8c35188652fda91b1c142d341a15a3998d6d13fffcf19a00755179fa635ff2836d8839d0d1084a13f81c4fda0",
            "file": "src/app/shared/services/translate/services/mockTranslateService.ts",
            "properties": [
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "translations",
                    "defaultValue": "signal<Record<string, any> | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Signal<string>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translate",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translate$",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Signal, computed, signal } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class MockTranslateService {\r\n  static url: Signal<string>;\r\n  static country: Signal<string>;\r\n  private translations = signal<Record<string, any> | null>(null);\r\n\r\n  constructor() {\r\n    MockTranslateService.url = signal('mock-url');\r\n    MockTranslateService.country = signal('mock-country');\r\n  }\r\n\r\n  // private getMockTranslations(url: string): Observable<Record<string, any> | null> {\r\n  //   // Simulate HTTP request with mock data\r\n  //   const mockTranslations = {\r\n  //     greeting: 'Hello',\r\n  //     farewell: 'Goodbye',\r\n  //   };\r\n  //   return of(mockTranslations);\r\n  // }\r\n\r\n  private getData(key: string, values?: Record<string, any>): Signal<string> {\r\n    return computed(() => {\r\n      if (!this.translations()) {\r\n        return '';\r\n      }\r\n\r\n      if (!key) {\r\n        return '';\r\n      }\r\n\r\n      // Mock getTranslation\r\n      const translation = this.translations()?.[key];\r\n      if (!translation) {\r\n        console.warn(`Translation not found for key: ${key}`);\r\n        return key;\r\n      }\r\n\r\n      // Mock replaceValues\r\n      const hasReplacementValues = values && Object.keys(values).length > 0;\r\n      if (hasReplacementValues) {\r\n        let translatedText = translation;\r\n        for (const [placeholder, value] of Object.entries(values)) {\r\n          translatedText = translatedText.replace(`{{${placeholder}}}`, value);\r\n        }\r\n        return translatedText;\r\n      }\r\n\r\n      return translation;\r\n    });\r\n  }\r\n\r\n  translate(key: string, values?: Record<string, any>): string {\r\n    return this.getData(key, values)();\r\n  }\r\n\r\n  translate$(key: string, values?: Record<string, any>): Observable<string> {\r\n    return of(this.translate(key, values));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SessionStorageService",
            "id": "injectable-SessionStorageService-29e6a79c819a949a83e7a3a84348c49fed6ad225ecc63e5cf383d3b37634d1b404d606836018a766a6dd0a7065e593fe01a848f8c3c3ea315c38a3c82cab84b5",
            "file": "src/app/shared/services/storage/session-storage.service.ts",
            "properties": [
                {
                    "name": "signals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | WritableSignal<any>>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "storage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Storage",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "watch",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "WritableSignal | undefined",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { StorageService } from './storage.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SessionStorageService extends StorageService {\n  constructor() {\n    const w = typeof window === 'undefined' ? null : window.sessionStorage;\n    super(window.sessionStorage);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 5
            },
            "extends": [
                "StorageService"
            ],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-18c46742df696d2e681e47568c07d2194bc6f94851ffcf78125c270921c289a73ecbfcf4ce48963b90bd24ba4ebc7ea4dbc737b64048871204a007e1bdd21bab",
            "file": "src/app/shared/services/theme/theme.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "applyTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "WritableSignal<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "WritableSignal<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deepMerge",
                    "args": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "source",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "source",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCssVariables",
                    "args": [
                        {
                            "name": "theme",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, WritableSignal } from '@angular/core';\nimport { DEFAULT_THEME } from './constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  applyTheme(theme: WritableSignal<typeof DEFAULT_THEME>): void {\n    if (typeof document === 'undefined') return;\n\n    // Perform a deep merge of the provided theme with the default theme\n    const mergedTheme = this.deepMerge(DEFAULT_THEME, theme());\n\n    // Update the signal with the merged theme\n    theme.set(mergedTheme);\n\n    // Apply theme properties to CSS variables\n    this.setCssVariables(mergedTheme);\n  }\n\n  private deepMerge(target: any, source: any): any {\n    const output = { ...target };\n    for (const key of Object.keys(source)) {\n      if (\n        Object.prototype.toString.call(source[key]) === '[object Object]' &&\n        key in target\n      ) {\n        // Recursively merge objects\n        output[key] = this.deepMerge(target[key], source[key]);\n      } else {\n        // Assign values directly\n        output[key] = source[key];\n      }\n    }\n    return output;\n  }\n\n  private setCssVariables(theme: typeof DEFAULT_THEME): void {\n    Object.entries(theme).forEach(([groupKey, groupValue]) => {\n      if (typeof groupValue === 'object' && groupValue !== null) {\n        Object.entries(groupValue).forEach(([key, value]) => {\n          const cssVariable = `--echo-theme-${groupKey}-${key}`;\n          document.documentElement.style.setProperty(cssVariable, value);\n        });\n      }\n    });\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-f720879632c09f7533d62018847e91863287a3dbb93a23677e23b06e18c06b504a9a0fef1cb522bb0563f6aa472203424d8513976e0e618a8a6ffd0677522edb",
            "file": "src/app/shared/containers/toast/toast.service.ts",
            "properties": [
                {
                    "name": "closeTimeoutId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isOpen",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "toasts",
                    "defaultValue": "signal<IToast[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "correlation_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "type": "IToast",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'success'"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "300000"
                        },
                        {
                            "name": "dateTime",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new Date()"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "correlation_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "IToast",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'success'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "300000",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dateTime",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new Date()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearCloseTimeout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetCloseTimeout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setIsOpen",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\n\ninterface IToast {\n  message: string;\n  correlation_id?: string;\n  dateTime: Date;\n  duration: number;\n  type: 'success' | 'error' | 'warning';\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToastService {\n  toasts = signal<IToast[]>([]);\n  isOpen = signal(false);\n  private closeTimeoutId: ReturnType<typeof setTimeout> | null = null;\n\n  add(\n    message: string,\n    correlation_id?: string,\n    type: IToast['type'] = 'success',\n    duration = 300000,\n    dateTime = new Date()\n  ) {\n    const toast: IToast = { message, duration, dateTime, type, correlation_id };\n    this.toasts.update((toasts) => [...toasts, toast]);\n    setTimeout(() => this.remove(0), duration);\n\n    this.setIsOpen(true);\n  }\n\n  remove(index: number) {\n    this.toasts.update((toasts) => toasts.filter((_, i) => i !== index));\n    if (this.toasts().length === 0) {\n      this.setIsOpen(false);\n    }\n  }\n\n  clear() {\n    this.toasts.update(() => []);\n    this.setIsOpen(false);\n  }\n\n  setIsOpen(state: boolean) {\n    if (state) {\n      this.isOpen.set(true);\n      this.resetCloseTimeout();\n    } else {\n      this.isOpen.set(false);\n      this.clearCloseTimeout();\n    }\n  }\n\n  private resetCloseTimeout() {\n    this.clearCloseTimeout();\n    this.closeTimeoutId = setTimeout(() => this.isOpen.set(false), 30000);\n  }\n\n  private clearCloseTimeout() {\n    if (this.closeTimeoutId !== null) {\n      clearTimeout(this.closeTimeoutId);\n      this.closeTimeoutId = null;\n    }\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TranslateService",
            "id": "injectable-TranslateService-2649e05af1e341cd96a232e135e3bc8c95a3f9c92c434ea56cd52ea90c6aefc7255a443c889cc0b8b5ff85502e705cee2d2c9c430c29a5492a0a148f0f539527",
            "file": "src/app/shared/services/translate/services/translate.service.ts",
            "properties": [
                {
                    "name": "_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "platformId",
                    "defaultValue": "inject(PLATFORM_ID)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "translations",
                    "defaultValue": "signal<Record<string, any> | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Signal<string>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTranslations",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translate",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translate$",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Injectable,\r\n  PLATFORM_ID,\r\n  Signal,\r\n  WritableSignal,\r\n  computed,\r\n  effect,\r\n  inject,\r\n  signal,\r\n} from '@angular/core';\r\nimport { Observable, filter, from, take, tap } from 'rxjs';\r\nimport { ITranslateConfig } from '../models/translate.models';\r\nimport {\r\n  getTranslation,\r\n  keyNotFoundError,\r\n  replacePlaceholders,\r\n} from '../utils/translate.utils';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { MockTranslateService } from './mockTranslateService';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TranslateService {\r\n  static _url: WritableSignal<string>;\r\n  private translations = signal<Record<string, any> | null>(null);\r\n  platformId = inject(PLATFORM_ID);\r\n\r\n  constructor() {\r\n    //updateTranslations when url changes\r\n    effect(() => {\r\n      if (isPlatformServer(this.platformId)) {\r\n        return;\r\n      }\r\n      this.getTranslations(TranslateService._url())\r\n        .pipe(\r\n          take(1),\r\n          tap((t) => this.translations.set(t))\r\n        )\r\n        .subscribe();\r\n    });\r\n  }\r\n\r\n  updateUrl(url: string) {\r\n    TranslateService._url.set(url);\r\n  }\r\n\r\n  private getTranslations(url: string) {\r\n    return from(\r\n      fetch(url)\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .catch((err) => {\r\n          console.error(err.message);\r\n          return null;\r\n        })\r\n    );\r\n  }\r\n\r\n  private getData(key: string, values?: Record<string, any>): Signal<string> {\r\n    return computed(() => {\r\n      if (!this.translations()) {\r\n        return '';\r\n      }\r\n\r\n      if (!key) {\r\n        return '';\r\n      }\r\n\r\n      //getTranslation\r\n      const keys = key.split('.');\r\n      const { translation, found } = getTranslation(this.translations(), keys);\r\n      if (!found) {\r\n        console.warn(keyNotFoundError(key, TranslateService._url()));\r\n        return key;\r\n      }\r\n\r\n      //replace Values\r\n      const hasReplacementValues = values && Object.keys(values).length > 0;\r\n      if (hasReplacementValues) {\r\n        return replacePlaceholders(translation, values);\r\n      }\r\n\r\n      return translation;\r\n    });\r\n  }\r\n\r\n  translate(key: string, values?: Record<string, any>): string {\r\n    return this.getData(key, values)();\r\n  }\r\n\r\n  translate$(key: string, values?: Record<string, any>): Observable<string> {\r\n    return toObservable(this.getData(key, values)).pipe(filter(Boolean));\r\n  }\r\n}\r\n\r\nexport function provideTranslate(config: ITranslateConfig) {\r\n  TranslateService._url = signal(config.initialUrl);\r\n  return TranslateService;\r\n}\r\n\r\nexport function provideTranslateTestModule() {\r\n  return { provide: TranslateService, useClass: MockTranslateService };\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "StorageService",
            "id": "class-StorageService-cece2d640538e3376a52acca893e980ae6394b4c363652f05879e2039e0078518f99439d1ffc09adf0fa162fac8d7754c88220b22298c60f3453ddd6727386b8",
            "file": "src/app/shared/services/storage/storage.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { signal, WritableSignal } from '@angular/core';\nimport { IStorage } from './storage.model';\n\nexport class StorageService {\n  private storage?: Storage;\n  private signals?: Map<string, WritableSignal<any>>;\n\n  constructor(storage: Storage | null) {\n    if (storage) {\n      this.storage = storage;\n      this.signals = new Map<string, WritableSignal<any>>();\n    }\n  }\n\n  watch<T>(key: keyof IStorage): WritableSignal<T | null> | undefined {\n    if (!this.signals?.has(key)) {\n      this.signals?.set(key, signal<T | null>(null));\n    }\n    const itemFromStorage = this.storage?.getItem(key);\n    const parsed = !itemFromStorage ? null : JSON.parse(itemFromStorage);\n\n    this.signals?.get(key)?.set(parsed);\n    return this.signals?.get(key);\n  }\n\n  get<T>(key: keyof IStorage): T | null {\n    var item = this.storage?.getItem(key);\n    if (item) {\n      return JSON.parse(item) as T;\n    }\n    return null;\n  }\n\n  set<T>(key: keyof IStorage, value: T) {\n    this.storage?.setItem(key, JSON.stringify(value));\n    if (!this.signals?.has(key)) {\n      this.signals?.set(key, signal<T>(value));\n    } else {\n      this.signals?.get(key)?.set(value);\n    }\n  }\n\n  remove(key: string) {\n    if (this.signals?.has(key)) {\n      this.signals?.delete(key);\n    }\n    this.storage?.removeItem(key);\n  }\n\n  clear() {\n    this.signals?.clear();\n    this.storage?.clear();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "Storage | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "Storage | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "signals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | WritableSignal<any>>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "storage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Storage",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "watch",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "WritableSignal | undefined",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ButtonDirective",
            "id": "directive-ButtonDirective-ddb2c1f69b54b27cafdbb40a375095b2a6148b4398a9cf58d788133edd84cd9cd416731d06b202ccd14c25c17ffe1879504b041b581828f7499caee0b52fdf67",
            "file": "src/app/shared/directives/button/button.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ApplicationRef,\n  createComponent,\n  Directive,\n  effect,\n  ElementRef,\n  HostBinding,\n  inject,\n  Injector,\n  input,\n  signal,\n} from '@angular/core';\nimport { LoadingCircleComponent } from '../../containers/loading-circle/loading-circle.component';\n\nexport type IVariant = 'default' | 'cta';\n\n@Directive({\n  standalone: true,\n  selector: '[appButton]',\n})\nexport class ButtonDirective {\n  variant = input<IVariant>('default');\n  isLoading = input(false);\n\n  el = inject(ElementRef);\n  appRef = inject(ApplicationRef);\n  injector = inject(Injector);\n\n  prevInnerHtml = signal<string | null>(null);\n  loadingCircleComponent = LoadingCircleComponent;\n\n  constructor() {\n    effect(() => {\n      const nativeEl = this.el.nativeElement as HTMLButtonElement;\n\n      if (this.isLoading()) {\n        // Save current content\n        this.prevInnerHtml.set(nativeEl.innerHTML);\n\n        // Clear existing content\n        nativeEl.innerHTML = '';\n\n        // Dynamically create and render the LoadingCircleComponent\n        const loadingComponent = createComponent(LoadingCircleComponent, {\n          environmentInjector: this.appRef.injector,\n          hostElement: nativeEl,\n        });\n\n        this.appRef.attachView(loadingComponent.hostView);\n      } else {\n        // Restore previous content\n        if (this.prevInnerHtml()) {\n          nativeEl.innerHTML = this.prevInnerHtml()!;\n        }\n      }\n    });\n  }\n\n  @HostBinding('class.button-directive__default')\n  get isDefault() {\n    return this.variant() === 'default';\n  }\n\n  @HostBinding('class.text-directive__info')\n  get isParagraph() {\n    return this.variant() === 'default';\n  }\n\n  @HostBinding('class.button-directive__cta')\n  get isCTA() {\n    return this.variant() === 'cta';\n  }\n\n  @HostBinding('class.text-directive__paragraph-bold')\n  get isParagraphBold() {\n    return this.variant() === 'cta';\n  }\n}\n",
            "selector": "[appButton]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "required": false
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.button-directive__cta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.button-directive__default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.text-directive__info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.text-directive__paragraph-bold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "appRef",
                    "defaultValue": "inject(ApplicationRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "el",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "injector",
                    "defaultValue": "inject(Injector)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "required": false
                },
                {
                    "name": "loadingCircleComponent",
                    "defaultValue": "LoadingCircleComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "prevInnerHtml",
                    "defaultValue": "signal<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "variant",
                    "defaultValue": "input<IVariant>('default')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "accessors": {
                "isDefault": {
                    "name": "isDefault",
                    "getSignature": {
                        "name": "isDefault",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "isParagraph": {
                    "name": "isParagraph",
                    "getSignature": {
                        "name": "isParagraph",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isCTA": {
                    "name": "isCTA",
                    "getSignature": {
                        "name": "isCTA",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                },
                "isParagraphBold": {
                    "name": "isParagraphBold",
                    "getSignature": {
                        "name": "isParagraphBold",
                        "type": "",
                        "returnType": "",
                        "line": 75
                    }
                }
            }
        },
        {
            "name": "CheckboxDirective",
            "id": "directive-CheckboxDirective-6c8a28989ace18d209ff55d24efd9ceaf073a6c77b7c5296191366b5b3bc8bee42ae66dbf897102c08c2a8bc9b2bf77c6875fc6a5b2fac63ed65eb56b8289ff0",
            "file": "src/app/shared/directives/checkbox/checkbox.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, input } from '@angular/core';\n\n@Directive({\n  standalone: true,\n  selector: '[appCheckbox]',\n})\nexport class CheckboxDirective {\n  @HostBinding('class.checkbox-container')\n  @HostBinding('class.text-directive__text')\n  disabled = input(false);\n\n  @HostBinding('class.checkbox-container--disabled') get isDisabled() {\n    return this.disabled();\n  }\n}\n",
            "selector": "[appCheckbox]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.checkbox-container'"
                        },
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.text-directive__text'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        170
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.checkbox-container",
                    "defaultValue": "input(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "class.checkbox-container--disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "class.text-directive__text",
                    "defaultValue": "input(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.checkbox-container'"
                        },
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.text-directive__text'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        170
                    ],
                    "required": false
                }
            ],
            "methodsClass": [],
            "extends": [],
            "accessors": {
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 12
                    }
                }
            }
        },
        {
            "name": "TextDirective",
            "id": "directive-TextDirective-720b4d01a353346e206a2d38eb8c9ba6192b08cbadcdaa34cfb8688ed54cf612e5f1714c371d1d336e45c77048e1cc74ea9b54fed1611e2655007d6dd9fe4e6d",
            "file": "src/app/shared/directives/text/text.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, input } from '@angular/core';\n\nexport type IVariant =\n  | 'paragraph'\n  | 'paragraph-bold'\n  | 'info'\n  | 'info-sm'\n  | 'title'\n  | 'title-sm';\n\n@Directive({\n  standalone: true,\n  selector: '[appText]',\n})\nexport class TextDirective {\n  variant = input<IVariant>('paragraph');\n\n  @HostBinding('class.text-directive__paragraph')\n  get isParagraph() {\n    return this.variant() === 'paragraph';\n  }\n\n  @HostBinding('class.text-directive__paragraph-bold')\n  get isParagraphBold() {\n    return this.variant() === 'paragraph-bold';\n  }\n\n  @HostBinding('class.text-directive__info')\n  get isInfo() {\n    return this.variant() === 'info';\n  }\n\n  @HostBinding('class.text-directive__info-sm')\n  get isInfoSM() {\n    return this.variant() === 'info-sm';\n  }\n\n  @HostBinding('class.text-directive__title')\n  get isTitle() {\n    return this.variant() === 'title';\n  }\n\n  @HostBinding('class.text-directive__title-sm')\n  get isTitleSM() {\n    return this.variant() === 'title-sm';\n  }\n}\n",
            "selector": "[appText]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.text-directive__info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.text-directive__info-sm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.text-directive__paragraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.text-directive__paragraph-bold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.text-directive__title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.text-directive__title-sm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "variant",
                    "defaultValue": "input<IVariant>('paragraph')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "extends": [],
            "accessors": {
                "isParagraph": {
                    "name": "isParagraph",
                    "getSignature": {
                        "name": "isParagraph",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                },
                "isParagraphBold": {
                    "name": "isParagraphBold",
                    "getSignature": {
                        "name": "isParagraphBold",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                },
                "isInfo": {
                    "name": "isInfo",
                    "getSignature": {
                        "name": "isInfo",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                },
                "isInfoSM": {
                    "name": "isInfoSM",
                    "getSignature": {
                        "name": "isInfoSM",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                },
                "isTitle": {
                    "name": "isTitle",
                    "getSignature": {
                        "name": "isTitle",
                        "type": "",
                        "returnType": "",
                        "line": 39
                    }
                },
                "isTitleSM": {
                    "name": "isTitleSM",
                    "getSignature": {
                        "name": "isTitleSM",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            }
        },
        {
            "name": "TextInputDirective",
            "id": "directive-TextInputDirective-2fbe96fa9a77de3df06905a8649c90df02ebd35944bcd335b12efcd8bce88d7b1c3ef74f21900f605ab16aa2014258fe3561c9d64fa946ee499b81b6f667efae",
            "file": "src/app/shared/directives/text-input/text-input.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  HostBinding,\n  ElementRef,\n  Renderer2,\n  AfterViewInit,\n  input,\n  effect,\n  inject,\n  HostListener,\n  model,\n} from '@angular/core';\n\nexport type IVariant = 'default';\n\n@Directive({\n  standalone: true,\n  selector: '[appTextInput]',\n})\nexport class TextInputDirective implements AfterViewInit {\n  el = inject(ElementRef);\n  renderer = inject(Renderer2);\n\n  variant = input<IVariant>('default');\n  placeholder = input('');\n  errorMessage = model('');\n\n  wrapperElement?: HTMLDivElement;\n  errorMessageElement?: HTMLDivElement;\n  placeholderElement?: HTMLElement;\n\n  @HostBinding('class.text-input-directive__default')\n  @HostBinding('class.text-directive__paragraph')\n  get isDefault() {\n    return this.variant() === 'default';\n  }\n\n  @HostListener('focus') onfocus() {}\n\n  @HostListener('input', ['$event.target.value'])\n  onInputChange(value: string) {\n    if (value !== this.errorMessage()) {\n      this.errorMessage.set('');\n    }\n  }\n\n  constructor() {\n    effect(() => {\n      const nativeElement: HTMLInputElement = this.el.nativeElement;\n      if (this.errorMessage() && this.wrapperElement) {\n        nativeElement.classList.add('text-input-directive__default--error');\n      } else {\n        nativeElement.classList.remove('text-input-directive__default--error');\n      }\n\n      const messageElement = this.wrapperElement?.lastChild as HTMLElement;\n      if (messageElement) messageElement.innerText = this.errorMessage();\n    });\n\n    effect(() => {\n      const placeholder = this.placeholder();\n      if (this.placeholderElement) {\n        this.renderer.setProperty(\n          this.placeholderElement,\n          'innerText',\n          placeholder\n        );\n      }\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // Create a wrapper div\n    this.wrapperElement = this.renderer.createElement('div');\n    this.renderer.addClass(\n      this.wrapperElement,\n      'text-input-directive__default__wrapper'\n    );\n\n    // Create the small element\n    this.placeholderElement = this.renderer.createElement('small');\n    this.renderer.addClass(\n      this.placeholderElement,\n      'text-input-directive__default__placeholder'\n    );\n    this.renderer.addClass(this.placeholderElement, 'text-directive__title-sm');\n    this.renderer.setProperty(\n      this.placeholderElement,\n      'innerText',\n      this.placeholder()\n    );\n\n    // Wrap the input\n    const nativeElement: HTMLInputElement = this.el.nativeElement;\n    nativeElement.setAttribute('placeholder', '');\n    const parent = nativeElement.parentNode;\n\n    // Create the message element\n    this.errorMessageElement = this.renderer.createElement('small');\n    this.renderer.addClass(\n      this.errorMessageElement,\n      'text-input-directive__default__message'\n    );\n    this.renderer.addClass(this.errorMessageElement, 'text-directive__info-sm');\n\n    this.renderer.insertBefore(parent, this.wrapperElement, nativeElement);\n    this.renderer.appendChild(this.wrapperElement, nativeElement);\n    this.renderer.appendChild(this.wrapperElement, this.placeholderElement);\n    this.renderer.appendChild(this.wrapperElement, this.errorMessageElement);\n  }\n}\n",
            "selector": "[appTextInput]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.text-directive__paragraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.text-input-directive__default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38
                },
                {
                    "name": "input",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target.value"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41
                }
            ],
            "propertiesClass": [
                {
                    "name": "el",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "model('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "errorMessageElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "placeholder",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "placeholderElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "variant",
                    "defaultValue": "input<IVariant>('default')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "wrapperElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onfocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input', ['$event.target.value']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "accessors": {
                "isDefault": {
                    "name": "isDefault",
                    "getSignature": {
                        "name": "isDefault",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AddMembersComponent",
            "id": "component-AddMembersComponent-2e6288e316d23da22b30b1494df55ec94dc60a67e08543194144635bf85d933e2a765cb8d51a3f423bd591a1a220c95820977016804429e7af31bd0666b5c207",
            "file": "src/app/containers/organizations/organization/add-members/add-members.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-members",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-members.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    manualUserImport: [false, [Validators.required]],\n    useIDP: [false, [Validators.required]],\n    identityProvider: ['', [Validators.required]],\n    authenticationMethod: ['', [Validators.required]],\n    clientID: ['', [Validators.required]],\n    clientSecret: ['', [Validators.required]],\n    members: this.fb.array([], [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "formSignal",
                    "defaultValue": "toSignal(this.form.valueChanges)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "isLoading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "localStorageService",
                    "defaultValue": "inject(LocalStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "manualUserImportSignal",
                    "defaultValue": "toSignal(\n    this.form.get('manualUserImport')?.valueChanges || of(null)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "useIDPSignal",
                    "defaultValue": "toSignal(this.form.get('useIDP')?.valueChanges || of(null))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "addMember",
                    "args": [
                        {
                            "name": "member",
                            "type": "IMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "IMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeWithFormDataFromLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "newMember",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeMember",
                    "args": [
                        {
                            "name": "memberIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TextInputDirective",
                    "type": "directive"
                },
                {
                    "name": "ButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "CheckboxDirective",
                    "type": "directive"
                },
                {
                    "name": "TextDirective",
                    "type": "directive"
                },
                {
                    "name": "TranslatePipe",
                    "type": "pipe"
                },
                {
                    "name": "FormErrorMessagePipe",
                    "type": "pipe"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, effect, inject, OnInit, signal } from '@angular/core';\nimport { TextInputDirective } from '../../../../shared/directives/text-input/text-input.directive';\nimport { ButtonDirective } from '../../../../shared/directives/button/button.directive';\nimport { CheckboxDirective } from '../../../../shared/directives/checkbox/checkbox.directive';\nimport { TextDirective } from '../../../../shared/directives/text/text.directive';\nimport { TranslatePipe } from '../../../../shared/services/translate/pipes/translate.pipe';\nimport {\n  FormArray,\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { of } from 'rxjs';\nimport { LocalStorageService } from '../../../../shared/services/storage/local-storage.service';\nimport { ICreateOrganizationForm, IMember } from './add-members.models';\nimport { IUserProfile } from '../../../../shared/services/storage/storage.model';\nimport { AuthService } from '../../../../shared/services/auth/auth.service';\nimport { FormErrorMessagePipe } from '../../../../shared/pipes/form-error-message.pipe';\n\n@Component({\n  standalone: true,\n  selector: 'app-add-members',\n  imports: [\n    TextInputDirective,\n    ButtonDirective,\n    CheckboxDirective,\n    TextDirective,\n    TranslatePipe,\n    FormErrorMessagePipe,\n    ReactiveFormsModule,\n  ],\n  templateUrl: './add-members.component.html',\n  styleUrl: './add-members.component.scss',\n})\nexport class AddMembersComponent {\n  isLoading = signal(false);\n\n  fb = inject(FormBuilder);\n  localStorageService = inject(LocalStorageService);\n  auth = inject(AuthService);\n\n  form = this.fb.group({\n    manualUserImport: [false, [Validators.required]],\n    useIDP: [false, [Validators.required]],\n    identityProvider: ['', [Validators.required]],\n    authenticationMethod: ['', [Validators.required]],\n    clientID: ['', [Validators.required]],\n    clientSecret: ['', [Validators.required]],\n    members: this.fb.array([], [Validators.required]),\n  });\n\n  formSignal = toSignal(this.form.valueChanges);\n  useIDPSignal = toSignal(this.form.get('useIDP')?.valueChanges || of(null));\n  manualUserImportSignal = toSignal(\n    this.form.get('manualUserImport')?.valueChanges || of(null)\n  );\n\n  constructor() {\n    this.initializeWithFormDataFromLocalStorage();\n\n    effect(() => {\n      if (this.formSignal()) {\n        const { clientSecret, ...form } =\n          this.formSignal() as ICreateOrganizationForm;\n        this.localStorageService.set('echo.create-organization-form', form);\n      }\n    });\n\n    effect(() => {\n      if (this.useIDPSignal()) {\n        this.form.get('manualUserImport')?.patchValue(false);\n      }\n    });\n\n    effect(() => {\n      if (this.manualUserImportSignal()) {\n        this.form.get('useIDP')?.patchValue(false);\n      }\n    });\n  }\n\n  initializeWithFormDataFromLocalStorage() {\n    const storedData = this.localStorageService.get<ICreateOrganizationForm>(\n      'echo.create-organization-form'\n    );\n\n    const creator = this.localStorageService.get<IUserProfile>('echo.user');\n\n    if (storedData) {\n      this.form.patchValue(storedData);\n      if (storedData.members.length > 0) {\n        //Remove current user from array\n        const updateMembers = storedData.members.filter(\n          (m) => m.email !== creator?.email\n        );\n\n        //add current user to form array as creator\n        this.addMember({\n          email: this.auth.userProfile?.()?.email || '',\n          name: this.auth.userProfile?.()?.name || '',\n          isAdmin: true,\n        });\n\n        //add other members\n        updateMembers.forEach((member) => this.addMember(member));\n      }\n    } else {\n      this.addMember({\n        email: this.auth.userProfile?.()?.email || '',\n        name: this.auth.userProfile?.()?.name || '',\n        isAdmin: true,\n      });\n    }\n  }\n\n  get members() {\n    return this.form.controls['members'] as unknown as FormArray<FormGroup>;\n  }\n\n  addMember(member: IMember) {\n    const memberForm = this.fb.group({\n      email: [member.email, [Validators.required, Validators.email]],\n      name: [member.name, [Validators.required]],\n      isAdmin: [member.isAdmin],\n    });\n\n    this.members.push(memberForm);\n  }\n\n  newMember() {\n    const memberForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      name: ['', [Validators.required]],\n      isAdmin: [false, [Validators.required]],\n    });\n\n    this.members.push(memberForm);\n  }\n\n  removeMember(memberIndex: number) {\n    this.members.removeAt(memberIndex);\n  }\n\n  submit() {\n    console.log(this.form.value);\n  }\n}\n",
            "styleUrl": "./add-members.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 58
            },
            "extends": [],
            "accessors": {
                "members": {
                    "name": "members",
                    "getSignature": {
                        "name": "members",
                        "type": "",
                        "returnType": "",
                        "line": 118
                    }
                }
            },
            "templateData": "<div class=\"add-members-container\" [formGroup]=\"form\">\n  <div class=\"title-container\">\n    <h4 appText variant=\"title\" class=\"title-container__title\">ADD MEMBERS</h4>\n  </div>\n\n  <div class=\"inputs-container\">\n    <input\n      appTextInput\n      type=\"text\"\n      [placeholder]=\"'Organization Name'\"\n      formControlName=\"organizationName\"\n      [errorMessage]=\"form.get('organizationName') | formErrorMessage\"\n    />\n\n    <div class=\"inputs-container__users-onboarding-options\">\n      <label appCheckbox>\n        <input type=\"checkbox\" formControlName=\"useIDP\" />\n        Users from Company IdP\n      </label>\n      <label appCheckbox>\n        <input type=\"checkbox\" formControlName=\"manualUserImport\" />\n        Manually Add Users\n      </label>\n    </div>\n\n    @if(form.get('useIDP')?.value){\n    <div class=\"inputs-container__idp\">\n      <h5 appText variant=\"paragraph-bold\" class=\"title-container__title\">\n        IDP INFO\n      </h5>\n      <select\n        [placeholder]=\"'Identity Provider'\"\n        appTextInput\n        formControlName=\"identityProvider\"\n      >\n        <option value=\"\">--Please choose an Identity Provider--</option>\n        <option value=\"microsoft\">Microsoft</option>\n        <option value=\"okta\">Okta</option>\n      </select>\n\n      <select\n        [placeholder]=\"'Authentication Method'\"\n        appTextInput\n        formControlName=\"authenticationMethod\"\n      >\n        <option value=\"\">--Please choose an Authentication Method--</option>\n        <option value=\"oauth2\">OAuth2</option>\n        <option value=\"saml\">SAML</option>\n      </select>\n      <input\n        appTextInput\n        type=\"text\"\n        [placeholder]=\"'Client ID'\"\n        formControlName=\"clientID\"\n        [errorMessage]=\"form.get('clientID') | formErrorMessage\"\n      />\n      <input\n        appTextInput\n        type=\"text\"\n        [placeholder]=\"'Client Secret'\"\n        formControlName=\"clientSecret\"\n        [errorMessage]=\"form.get('clientSecret') | formErrorMessage\"\n      />\n    </div>\n    } @if(form.get('manualUserImport')?.value){\n    <div class=\"inputs-container__manual-member-import\" formArrayName=\"members\">\n      <h5 appText variant=\"paragraph-bold\" class=\"title-container__title\">\n        MEMBERS\n      </h5>\n      @for (memberForm of members.controls; track memberForm; let idx = $index)\n      {\n      <div\n        class=\"inputs-container__manual-member-import__member\"\n        [formGroup]=\"memberForm\"\n      >\n        <input\n          appTextInput\n          type=\"text\"\n          formControlName=\"email\"\n          [placeholder]=\"'Email'\"\n          [errorMessage]=\"memberForm.get('email') | formErrorMessage\"\n        />\n        <input\n          appTextInput\n          type=\"text\"\n          formControlName=\"name\"\n          [placeholder]=\"'Name'\"\n          [errorMessage]=\"memberForm.get('name') | formErrorMessage\"\n        />\n        <label appCheckbox>\n          <input type=\"checkbox\" formControlName=\"isAdmin\" />\n          Admin member?\n        </label>\n        <button appButton (click)=\"removeMember(idx)\">Remove member</button>\n      </div>\n      }\n\n      <button appButton (click)=\"newMember()\">Add new member</button>\n    </div>\n    }\n  </div>\n\n  <div class=\"buttons-container\">\n    <button\n      appButton\n      variant=\"cta\"\n      [isLoading]=\"isLoading()\"\n      (click)=\"submit()\"\n      [disabled]=\"isLoading()\"\n    >\n      {{ \"BUTTONS.CONTINUE\" | translate }}\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b00a549604f216f1a0ed5a8448cf634c28016d3051024eb33780600b20a7f4a0900f6b47d9d59685782ee9081ed3d2687ec8ff973f8a87ed32d186cb59d484d4",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideTranslate({\n    initialUrl: ,\n})"
                }
            ],
            "selector": "echo-app",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "authConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "required": false
                },
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "getRouterLink",
                    "defaultValue": "getRouterLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "IS_EMBEDDED",
                    "defaultValue": "env.isEmbedded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "loadingScreen",
                    "defaultValue": "inject(LoadingScreenService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "PATHS",
                    "defaultValue": "PATHS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "ROUTER_NAME",
                    "defaultValue": "ROUTER_NAME",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "theme",
                    "defaultValue": "model<typeof DEFAULT_THEME>(DEFAULT_THEME)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "themeService",
                    "defaultValue": "inject(ThemeService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "title",
                    "defaultValue": "input('local')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "toastService",
                    "defaultValue": "inject(ToastService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "routeOnPageLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "BreadcrumbComponent",
                    "type": "component"
                },
                {
                    "name": "LoadingScreenComponent",
                    "type": "component"
                },
                {
                    "name": "ToastComponent",
                    "type": "component"
                },
                {
                    "name": "NavComponent",
                    "type": "component"
                },
                {
                    "name": "LanguagePickerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Component, inject, input, model, OnInit } from '@angular/core';\nimport { Router, RouterOutlet } from '@angular/router';\nimport { take } from 'rxjs';\nimport { PATHS } from './app.routes';\nimport { DEFAULT_THEME } from './shared/services/theme/constants';\nimport { ThemeService } from './shared/services/theme/theme.service';\nimport { AuthService } from './shared/services/auth/auth.service';\nimport { IAuthConfig } from './shared/services/auth/model';\nimport { BreadcrumbComponent } from './shared/services/custom-routing/breadcrumb/breadcrumb.component';\nimport { env } from '../environments/environment';\nimport {\n  getRouterLink,\n  ROUTER_NAME,\n} from './shared/services/custom-routing/constants';\nimport { LoadingScreenComponent } from './shared/containers/loading-screen/loading-screen.component';\nimport { LoadingScreenService } from './shared/containers/loading-screen/loading-screen.service';\nimport { ToastService } from './shared/containers/toast/toast.service';\nimport { ToastComponent } from './shared/containers/toast/toast.component';\nimport { NavComponent } from './shared/containers/nav/nav.component';\nimport { LanguagePickerComponent } from './shared/containers/language-picker/language-picker.component';\nimport { provideTranslate } from './shared/services/translate/services/translate.service';\n\n@Component({\n  standalone: true,\n  selector: 'echo-app',\n  imports: [\n    RouterOutlet,\n    BreadcrumbComponent,\n    LoadingScreenComponent,\n    ToastComponent,\n    NavComponent,\n    LanguagePickerComponent,\n  ],\n  providers: [\n    provideTranslate({\n      initialUrl: `assets/i18n/en.json`,\n    }),\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent implements OnInit {\n  http = inject(HttpClient);\n  router = inject(Router);\n\n  themeService = inject(ThemeService);\n  authService = inject(AuthService);\n  loadingScreen = inject(LoadingScreenService);\n  toastService = inject(ToastService);\n\n  PATHS = PATHS;\n  ROUTER_NAME = ROUTER_NAME;\n  IS_EMBEDDED = env.isEmbedded;\n  getRouterLink = getRouterLink;\n\n  title = input('local');\n  authConfig = input<IAuthConfig>();\n  theme = model<typeof DEFAULT_THEME>(DEFAULT_THEME);\n\n  ngOnInit(): void {\n    this.themeService.applyTheme(this.theme);\n    this.routeOnPageLoad();\n\n    if (this.IS_EMBEDDED) {\n      this.authService.validateToken(this.authConfig());\n    }\n  }\n\n  getUsers() {\n    this.http.get('/prod/users').pipe(take(1)).subscribe(console.log);\n  }\n\n  routeOnPageLoad() {\n    this.router.initialNavigation();\n  }\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-nav></app-nav> @if (IS_EMBEDDED) {<app-breadcrumb></app-breadcrumb>}\n<app-language-picker></app-language-picker>\n<main class=\"main__container\">\n  @if (IS_EMBEDDED) {<router-outlet [name]=\"ROUTER_NAME\"></router-outlet> }@else\n  {<router-outlet></router-outlet>} @if(toastService.toasts().length > 0) {\n  <app-toast></app-toast>}\n</main>\n\n@if (loadingScreen.isLoading()) {\n<app-loading-screen></app-loading-screen>\n}\n"
        },
        {
            "name": "AuthPageComponent",
            "id": "component-AuthPageComponent-c99fecd979eadb0770fb77f40aaef9cb43e85e567630bb40dfc45fe549255739a523e6cba17d8ad5bb29a9a7f5ce5d0e540b0dbfd10b4367da527803e2fb6ddb",
            "file": "src/app/containers/auth-page/auth-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auth-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    email: ['', [Validators.required, Validators.email]], // Required and must be a valid email\n    name: ['', [Validators.required, Validators.minLength(2)]], // Required and at least 3 characters long\n    otp: ['', [Validators.required, Validators.pattern('^[0-9]{6}$')]], // Required and must be exactly 6 digits\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "getRouterLink",
                    "defaultValue": "getRouterLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "isCompleteLogin",
                    "defaultValue": "signal<boolean>(\n    !!this.route.snapshot.data[PATHS.COMPLETE_LOGIN]\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "isLoading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "isLogin",
                    "defaultValue": "signal<boolean>(!!this.route.snapshot.data[PATHS.LOGIN])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "isRegister",
                    "defaultValue": "signal<boolean>(!!this.route.snapshot.data[PATHS.REGISTER])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "isVerifyEmail",
                    "defaultValue": "signal<boolean>(\n    !!this.route.snapshot.data[PATHS.VERIFY_EMAIL]\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "isVerifyOTP",
                    "defaultValue": "computed(() => this.isVerifyEmail() || this.isCompleteLogin())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "localStorageService",
                    "defaultValue": "inject(LocalStorageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "PATHS",
                    "defaultValue": "PATHS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "returnUrl",
                    "defaultValue": "signal(history?.state?.returnUrl)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "route",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "toastService",
                    "defaultValue": "inject(ToastService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "ButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "TextDirective",
                    "type": "directive"
                },
                {
                    "name": "TextInputDirective",
                    "type": "directive"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "TranslatePipe",
                    "type": "pipe"
                },
                {
                    "name": "FormErrorMessagePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, inject, OnInit, signal } from '@angular/core';\nimport {\n  ActivatedRoute,\n  Router,\n  RouterLink,\n  RouterLinkActive,\n} from '@angular/router';\nimport { PATHS } from '../../app.routes';\nimport { NgIf } from '@angular/common';\nimport { ButtonDirective } from '../../shared/directives/button/button.directive';\nimport { TextDirective } from '../../shared/directives/text/text.directive';\nimport { TextInputDirective } from '../../shared/directives/text-input/text-input.directive';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { AuthService } from '../../shared/services/auth/auth.service';\nimport { catchError, finalize, of, tap } from 'rxjs';\nimport { ToastService } from '../../shared/containers/toast/toast.service';\nimport {\n  getRouterLink,\n  ROUTER_NAME,\n} from '../../shared/services/custom-routing/constants';\nimport { TranslatePipe } from '../../shared/services/translate/pipes/translate.pipe';\nimport { LocalStorageService } from '../../shared/services/storage/local-storage.service';\nimport { FormErrorMessagePipe } from '../../shared/pipes/form-error-message.pipe';\nimport { IUserProfile } from '../../shared/services/storage/storage.model';\n\n@Component({\n  standalone: true,\n  selector: 'app-auth-page',\n  imports: [\n    NgIf,\n    ButtonDirective,\n    TextDirective,\n    TextInputDirective,\n    ReactiveFormsModule,\n    RouterLink,\n    RouterLinkActive,\n    TranslatePipe,\n    FormErrorMessagePipe,\n  ],\n  templateUrl: './auth-page.component.html',\n  styleUrl: './auth-page.component.scss',\n})\nexport class AuthPageComponent {\n  route = inject(ActivatedRoute);\n  router = inject(Router);\n  fb = inject(FormBuilder);\n\n  authService = inject(AuthService);\n  toastService = inject(ToastService);\n\n  localStorageService = inject(LocalStorageService);\n\n  PATHS = PATHS;\n  getRouterLink = getRouterLink;\n\n  form = this.fb.group({\n    email: ['', [Validators.required, Validators.email]], // Required and must be a valid email\n    name: ['', [Validators.required, Validators.minLength(2)]], // Required and at least 3 characters long\n    otp: ['', [Validators.required, Validators.pattern('^[0-9]{6}$')]], // Required and must be exactly 6 digits\n  });\n\n  isLogin = signal<boolean>(!!this.route.snapshot.data[PATHS.LOGIN]);\n  isRegister = signal<boolean>(!!this.route.snapshot.data[PATHS.REGISTER]);\n\n  isVerifyEmail = signal<boolean>(\n    !!this.route.snapshot.data[PATHS.VERIFY_EMAIL]\n  );\n  isCompleteLogin = signal<boolean>(\n    !!this.route.snapshot.data[PATHS.COMPLETE_LOGIN]\n  );\n\n  returnUrl = signal(history?.state?.returnUrl);\n\n  isVerifyOTP = computed(() => this.isVerifyEmail() || this.isCompleteLogin());\n\n  isLoading = signal(false);\n\n  get isValid() {\n    if (this.isLogin()) {\n      return this.form.get('email')?.valid;\n    } else if (this.isRegister()) {\n      return this.form.get('email')?.valid && this.form.get('name')?.valid;\n    } else if (this.isVerifyOTP()) {\n      return this.form.get('otp')?.valid;\n    } else {\n      return true;\n    }\n  }\n\n  submit() {\n    let email = this.form.get('email')?.value;\n    const name = this.form.get('name')?.value;\n    const otp = this.form.get('otp')?.value;\n\n    console.log('Submit');\n\n    if (this.isLogin() && email) {\n      if (this.form.get('email')?.valid) {\n        console.log('Login', email);\n        this.isLoading.set(true);\n        this.localStorageService.set('echo.user', { email });\n        this.authService\n          .startLogin(email)\n          .pipe(\n            tap(() => {\n              this.router.navigate(getRouterLink(PATHS.COMPLETE_LOGIN), {\n                state: { returnUrl: this.returnUrl() },\n              });\n            }),\n            catchError((err) => {\n              this.localStorageService.remove('echo.user');\n              this.toastService.add(err.error.result.error_message, 'error');\n              return of(null);\n            }),\n            finalize(() => this.isLoading.set(false))\n          )\n          .subscribe();\n      }\n    }\n\n    if (this.isRegister() && email && name) {\n      if (this.form.get('email')?.valid && this.form.get('name')?.valid) {\n        console.log('Register', email);\n        this.isLoading.set(true);\n        this.localStorageService.set('echo.user', { email });\n        this.authService\n          .register(email, name)\n          .pipe(\n            tap(() => {\n              console.log({ email, name });\n              this.router.navigate(getRouterLink(PATHS.VERIFY_EMAIL));\n            }),\n            catchError((err) => {\n              this.localStorageService.remove('echo.user');\n              this.toastService.add(\n                err.error.result.error_message,\n                err.error.result.correlation_id,\n                'error'\n              );\n              return of(null);\n            }),\n            finalize(() => this.isLoading.set(false))\n          )\n          .subscribe();\n      }\n    }\n\n    email = this.authService.userProfile?.()?.email;\n\n    if (this.isVerifyOTP() && email && otp) {\n      if (this.form.get('otp')?.valid) {\n        console.log('Verify');\n        this.isLoading.set(true);\n        if (this.isVerifyEmail()) {\n          this.authService\n            .verifyEmail(email, String(otp))\n            .pipe(\n              tap(() => {\n                this.router.navigate(getRouterLink(PATHS.LOGIN));\n              }),\n              catchError((err) => {\n                this.toastService.add(\n                  err.error.result.error_message,\n                  err.error.result.correlation_id,\n                  'error'\n                );\n                return of(null);\n              }),\n              finalize(() => this.isLoading.set(false))\n            )\n            .subscribe();\n        }\n\n        if (this.isCompleteLogin()) {\n          this.isLoading.set(true);\n          this.authService\n            .completeLogin(email, String(otp))\n            .pipe(\n              tap(() => {\n                this.router.navigate(\n                  getRouterLink(this.returnUrl() || PATHS.HOME)\n                );\n              }),\n              catchError((err) => {\n                this.toastService.add(\n                  err.error.result.error_message,\n                  err.error.result.correlation_id,\n                  'error'\n                );\n                return of(null);\n              }),\n              finalize(() => this.isLoading.set(false))\n            )\n            .subscribe();\n        }\n      }\n    }\n  }\n}\n",
            "styleUrl": "./auth-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "",
                        "returnType": "",
                        "line": 78
                    }
                }
            },
            "templateData": "<div class=\"auth-page-container\" [formGroup]=\"form\">\n  <div class=\"title-container\">\n    <h4\n      *ngIf=\"isRegister()\"\n      appText\n      variant=\"title\"\n      class=\"title-container__title\"\n    >\n      {{ \"REGISTER_PAGE.TITLE\" | translate }}\n    </h4>\n    <h4\n      *ngIf=\"isLogin()\"\n      appText\n      variant=\"title\"\n      class=\"title-container__title\"\n    >\n      {{ \"LOGIN_PAGE.TITLE\" | translate }}\n    </h4>\n    <h4\n      *ngIf=\"isVerifyOTP()\"\n      appText\n      variant=\"title\"\n      class=\"title-container__title\"\n    >\n      {{ \"VERIFY_OTP_PAGE.TITLE\" | translate }}\n    </h4>\n  </div>\n\n  <div class=\"body\">\n    <div class=\"link-container\">\n      <a\n        appText\n        variant=\"info\"\n        [routerLink]=\"getRouterLink(PATHS.REGISTER)\"\n        routerLinkActive=\"active\"\n        ariaCurrentWhenActive=\"page\"\n        *ngIf=\"isLogin()\"\n      >\n        {{ \"LOGIN_PAGE.GO_TO_REGISTER\" | translate }}</a\n      >\n      <a\n        appText\n        variant=\"info\"\n        [routerLink]=\"getRouterLink(PATHS.LOGIN)\"\n        routerLinkActive=\"active\"\n        ariaCurrentWhenActive=\"page\"\n        *ngIf=\"isRegister()\"\n      >\n        {{ \"REGISTER_PAGE.GO_TO_LOGIN\" | translate }}</a\n      >\n    </div>\n\n    <p appText variant=\"paragraph\" class=\"subtitle\" *ngIf=\"isVerifyOTP()\">\n      {{ \"VERIFY_OTP_PAGE.SUBTITLE\" | translate }}\n    </p>\n\n    <div class=\"input__container\">\n      <input\n        *ngIf=\"isRegister() || isLogin()\"\n        formControlName=\"email\"\n        appTextInput\n        type=\"email\"\n        autocomplete=\"username\"\n        [placeholder]=\"'INPUTS.EMAIL_PLACEHOLDER' | translate\"\n        [errorMessage]=\"form.get('email') | formErrorMessage\"\n      />\n      <input\n        formControlName=\"name\"\n        appTextInput\n        *ngIf=\"isRegister()\"\n        type=\"text\"\n        [placeholder]=\"'INPUTS.NAME_PLACEHOLDER' | translate\"\n        [errorMessage]=\"form.get('name') | formErrorMessage\"\n      />\n      <input\n        formControlName=\"otp\"\n        appTextInput\n        *ngIf=\"isVerifyOTP()\"\n        type=\"text\"\n        [placeholder]=\"'INPUTS.OTP_PLACEHOLDER' | translate\"\n        [errorMessage]=\"form.get('otp') | formErrorMessage\"\n      />\n    </div>\n\n    <div class=\"info_container\">\n      <small appText variant=\"info\" *ngIf=\"isVerifyOTP()\">\n        {{ \"VERIFY_OTP_PAGE.REQUEST_NEW_OTP\" | translate }}\n      </small>\n    </div>\n  </div>\n\n  <div class=\"buttons-container\">\n    <button\n      appButton\n      variant=\"cta\"\n      [isLoading]=\"isLoading()\"\n      (click)=\"submit()\"\n      [disabled]=\"isLoading() || !isValid\"\n    >\n      {{ \"BUTTONS.CONTINUE\" | translate }}\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-d8b26bd8344a75dd2cf093de63b0153d2035adf2c11dc3ed0e6843939a77dd06e85ea3d01b68098b7b1f6046781d2cefb9dbb2fe7d838f6740a0da57befdd107",
            "file": "src/app/shared/services/custom-routing/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-breadcrumb",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: flex;\n      }\n      .breadcrumb {\n        list-style: none;\n        display: flex;\n        padding: 0;\n        margin: 0;\n      }\n\n      .breadcrumb li span {\n        text-decoration: unset;\n        cursor: pointer;\n      }\n\n      .breadcrumb li span:last-child {\n        margin: 0 4px;\n      }\n    "
            ],
            "template": "@for(crumb of breadcrumbService.breadcrumbs(); track $index; let idx =\n$index){\n<nav>\n  <ul class=\"breadcrumb\">\n    <li>\n      <a\n        [routerLink]=\"[getBreadcrumbLink(idx)]\"\n        routerLinkActive=\"active\"\n        ariaCurrentWhenActive=\"page\"\n        >{{ crumb }}</a\n      >\n      @if(!isLastBreadcrumb(idx)) {\n      <span>/</span>\n      }\n    </li>\n  </ul>\n</nav>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadcrumbService",
                    "defaultValue": "inject(BreadcrumbService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "getBreadcrumbLink",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | string",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isLastBreadcrumb",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { BreadcrumbService } from './breadcrumb.service';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\nimport { getRouterLink } from '../constants';\n\n@Component({\n  standalone: true,\n  selector: 'app-breadcrumb',\n  imports: [RouterLink, RouterLinkActive],\n  template: `\n    @for(crumb of breadcrumbService.breadcrumbs(); track $index; let idx =\n    $index){\n    <nav>\n      <ul class=\"breadcrumb\">\n        <li>\n          <a\n            [routerLink]=\"[getBreadcrumbLink(idx)]\"\n            routerLinkActive=\"active\"\n            ariaCurrentWhenActive=\"page\"\n            >{{ crumb }}</a\n          >\n          @if(!isLastBreadcrumb(idx)) {\n          <span>/</span>\n          }\n        </li>\n      </ul>\n    </nav>\n    }\n  `,\n  styles: [\n    `\n      :host {\n        display: flex;\n      }\n      .breadcrumb {\n        list-style: none;\n        display: flex;\n        padding: 0;\n        margin: 0;\n      }\n\n      .breadcrumb li span {\n        text-decoration: unset;\n        cursor: pointer;\n      }\n\n      .breadcrumb li span:last-child {\n        margin: 0 4px;\n      }\n    `,\n  ],\n})\nexport class BreadcrumbComponent {\n  breadcrumbService = inject(BreadcrumbService);\n\n  getBreadcrumbLink(idx: number): object | string {\n    const path = this.breadcrumbService\n      .breadcrumbs()\n      .slice(0, idx + 1)\n      .join('/');\n    return getRouterLink(path);\n  }\n\n  isLastBreadcrumb(idx: number): boolean {\n    return idx === this.breadcrumbService.breadcrumbs().length - 1;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: flex;\n      }\n      .breadcrumb {\n        list-style: none;\n        display: flex;\n        padding: 0;\n        margin: 0;\n      }\n\n      .breadcrumb li span {\n        text-decoration: unset;\n        cursor: pointer;\n      }\n\n      .breadcrumb li span:last-child {\n        margin: 0 4px;\n      }\n    \n",
            "extends": []
        },
        {
            "name": "CreateOrganizationComponent",
            "id": "component-CreateOrganizationComponent-33f0dc050e825feea39d868d7b4045e1d11a70d5c98a64d1dfdcf1e978bb4508be8518039b6085130d8edb17a04c8b29b865a936f37d9c2e2684bfdffd2ba345",
            "file": "src/app/containers/organizations/create-organization/create-organization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-organization",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-organization.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    name: ['', [Validators.required, Validators.minLength(3)]],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isLoading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TextInputDirective",
                    "type": "directive"
                },
                {
                    "name": "ButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "TextDirective",
                    "type": "directive"
                },
                {
                    "name": "TranslatePipe",
                    "type": "pipe"
                },
                {
                    "name": "FormErrorMessagePipe",
                    "type": "pipe"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit, signal } from '@angular/core';\nimport { TextInputDirective } from '../../../shared/directives/text-input/text-input.directive';\nimport { ButtonDirective } from '../../../shared/directives/button/button.directive';\nimport { TextDirective } from '../../../shared/directives/text/text.directive';\nimport { TranslatePipe } from '../../../shared/services/translate/pipes/translate.pipe';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { AuthService } from '../../../shared/services/auth/auth.service';\nimport { FormErrorMessagePipe } from '../../../shared/pipes/form-error-message.pipe';\nimport { switchMap } from 'rxjs';\n\n@Component({\n  standalone: true,\n  selector: 'app-create-organization',\n  imports: [\n    TextInputDirective,\n    ButtonDirective,\n    TextDirective,\n    TranslatePipe,\n    FormErrorMessagePipe,\n    ReactiveFormsModule,\n  ],\n  templateUrl: './create-organization.component.html',\n  styleUrl: './create-organization.component.scss',\n})\nexport class CreateOrganizationComponent implements OnInit {\n  isLoading = signal(false);\n\n  fb = inject(FormBuilder);\n  auth = inject(AuthService);\n\n  form = this.fb.group({\n    name: ['', [Validators.required, Validators.minLength(3)]],\n  });\n\n  ngOnInit(): void {\n    // this.form.get('name')?.valueChanges.pipe(switchMap((v)=> this.organizationService.checkOrganisationExists(name))).subscribe()\n  }\n\n  submit() {\n    console.log(this.form.value);\n  }\n}\n",
            "styleUrl": "./create-organization.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"create-organizations-container\" [formGroup]=\"form\">\n  <div class=\"title-container\">\n    <h4 appText variant=\"title\" class=\"title-container__title\">\n      CREATE ORGANIZATION\n    </h4>\n  </div>\n\n  <div class=\"inputs-container\">\n    <input\n      appTextInput\n      type=\"text\"\n      [placeholder]=\"'Organization Name'\"\n      formControlName=\"organizationName\"\n      [errorMessage]=\"form.get('organizationName') | formErrorMessage\"\n    />\n  </div>\n\n  <div class=\"buttons-container\">\n    <button\n      appButton\n      variant=\"cta\"\n      [isLoading]=\"isLoading()\"\n      (click)=\"submit()\"\n      [disabled]=\"isLoading()\"\n    >\n      {{ \"BUTTONS.CONTINUE\" | translate }}\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "HomepageComponent",
            "id": "component-HomepageComponent-f42593a71e2196fb67753982dad48ba0f19fb6ced530860c0c127b148ffaa9796806fbac4d3e83e035758cc3b0010d3e2754a52319148e0c4335427c8bdef368",
            "file": "src/app/containers/homepage/homepage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-homepage",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./homepage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getRouterLink",
                    "defaultValue": "getRouterLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "PATHS",
                    "defaultValue": "PATHS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TextDirective",
                    "type": "directive"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { getRouterLink } from '../../shared/services/custom-routing/constants';\nimport { PATHS } from '../../app.routes';\nimport { TextDirective } from '../../shared/directives/text/text.directive';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\n\n@Component({\n  standalone: true,\n  selector: 'app-homepage',\n  imports: [TextDirective, RouterLink, RouterLinkActive],\n  templateUrl: './homepage.component.html',\n  styleUrl: './homepage.component.scss',\n})\nexport class HomepageComponent {\n  PATHS = PATHS;\n  getRouterLink = getRouterLink;\n}\n",
            "styleUrl": "./homepage.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a\n  appText\n  variant=\"paragraph\"\n  [routerLink]=\"getRouterLink(PATHS.ORGANIZATIONS)\"\n  routerLinkActive=\"active\"\n  ariaCurrentWhenActive=\"page\"\n>\n  Organizations</a\n>\n"
        },
        {
            "name": "LanguagePickerComponent",
            "id": "component-LanguagePickerComponent-7db169f5012d0f6a498ff48a69cd34a577c06c20c012d45d66ac3149289f8048c48f459993f3d569506f07c8e79d5991832ca571245f0b45f5847aa089228dbe",
            "file": "src/app/shared/containers/language-picker/language-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-language-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./language-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "languages",
                    "defaultValue": "signal(SUPPORTED_LANGUAGES)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "languageService",
                    "defaultValue": "inject(LanguageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslatePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, signal } from '@angular/core';\nimport {\n  LanguageService,\n  SUPPORTED_LANGUAGES,\n} from '../../services/language/language.service';\nimport { TranslatePipe } from '../../services/translate/pipes/translate.pipe';\n\n@Component({\n  standalone: true,\n  selector: 'app-language-picker',\n  imports: [TranslatePipe],\n  templateUrl: './language-picker.component.html',\n  styleUrl: './language-picker.component.scss',\n})\nexport class LanguagePickerComponent {\n  languageService = inject(LanguageService);\n  languages = signal(SUPPORTED_LANGUAGES);\n\n  changeLanguage(event: Event) {\n    const language = (event.target as HTMLSelectElement).value;\n    this.languageService.changeLanguage(language);\n  }\n}\n",
            "styleUrl": "./language-picker.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<select (change)=\"changeLanguage($event)\">\n  @for (language of languages(); track $index) {\n  <option\n    [selected]=\"languageService.currentLanguage() === language.value\"\n    [value]=\"language.value\"\n  >\n    {{ language.key | translate }}\n  </option>\n  }\n</select>\n"
        },
        {
            "name": "LoadingCircleComponent",
            "id": "component-LoadingCircleComponent-67ca7d931aac0a7792e26de18717fa16a784496200274287f7f5d3eb89d58443c92c0e94692eb517a3cf8be6f10b83327119f9c2c0c008682cfc77b272927599",
            "file": "src/app/shared/containers/loading-circle/loading-circle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-circle",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./loading-circle.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  standalone: true,\n  selector: 'app-loading-circle',\n  imports: [],\n  templateUrl: './loading-circle.component.html',\n  styleUrl: './loading-circle.component.scss',\n})\nexport class LoadingCircleComponent {}\n",
            "styleUrl": "./loading-circle.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"loader\"></div>\n"
        },
        {
            "name": "LoadingScreenComponent",
            "id": "component-LoadingScreenComponent-9020ec667939b02c22f5dc4a11e563b9a5287ccbb15447bbeb4e85de37d776320bbe09caedd57dcefada0f22d4843cb99b151d7604628d77e51dc53ad19cfa68",
            "file": "src/app/shared/containers/loading-screen/loading-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-screen",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./loading-screen.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  standalone: true,\n  selector: 'app-loading-screen',\n  imports: [],\n  templateUrl: './loading-screen.component.html',\n  styleUrl: './loading-screen.component.scss',\n})\nexport class LoadingScreenComponent {}\n",
            "styleUrl": "./loading-screen.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"loading-screen__background\">\n  <div class=\"loading-screen\">\n    <div class=\"circle\"></div>\n    <div class=\"circle\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n"
        },
        {
            "name": "NavComponent",
            "id": "component-NavComponent-7b84ad9c868665a95028be48661ea8d8861db8ea3f49b0352137a9d505008fa6d96673a7fd8e25cdc38690c3c60a42d49732e27a6d25975f529375aef509dce5",
            "file": "src/app/shared/containers/nav/nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nav.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "getRouterLink",
                    "defaultValue": "getRouterLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "IS_EMBEDDED",
                    "defaultValue": "env.isEmbedded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "PATHS",
                    "defaultValue": "PATHS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\nimport { PATHS } from '../../../app.routes';\nimport { getRouterLink } from '../../services/custom-routing/constants';\nimport { env } from '../../../../environments/environment';\nimport { AuthService } from '../../services/auth/auth.service';\n\n@Component({\n  standalone: true,\n  selector: 'app-nav',\n  imports: [RouterLink, RouterLinkActive],\n  templateUrl: './nav.component.html',\n  styleUrl: './nav.component.scss',\n})\nexport class NavComponent {\n  PATHS = PATHS;\n  getRouterLink = getRouterLink;\n  IS_EMBEDDED = env.isEmbedded;\n\n  authService = inject(AuthService);\n}\n",
            "styleUrl": "./nav.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<nav>\n  <div class=\"left\">\n    <h3>ECHO</h3>\n  </div>\n\n  <div class=\"right\">\n    <ul>\n      @if (authService.isAuthed()) {\n      <li (click)=\"authService.logout()\">\n        <a\n          [routerLink]=\"getRouterLink(PATHS.REGISTER)\"\n          routerLinkActive=\"active\"\n          ariaCurrentWhenActive=\"page\"\n        >\n          Logout\n        </a>\n      </li>\n      } @else {\n      <li>\n        <a\n          [routerLink]=\"getRouterLink(PATHS.LOGIN)\"\n          routerLinkActive=\"active\"\n          ariaCurrentWhenActive=\"page\"\n        >\n          Login\n        </a>\n      </li>\n\n      <li>\n        <a\n          [routerLink]=\"getRouterLink(PATHS.REGISTER)\"\n          routerLinkActive=\"active\"\n          ariaCurrentWhenActive=\"page\"\n        >\n          Register\n        </a>\n      </li>\n      }\n    </ul>\n  </div>\n</nav>\n"
        },
        {
            "name": "OrganizationComponent",
            "id": "component-OrganizationComponent-9ef2905623a19926f90f84c6a9389fb469aa8449280725ffede97b38243f93cfd24332732bb58b82a77947625731a9db07ea283f976a0eda2f8f5e1e0a9bd6ae",
            "file": "src/app/containers/organizations/organization/organization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-organization",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./organization.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getRouterLink",
                    "defaultValue": "getRouterLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "PATHS",
                    "defaultValue": "PATHS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TextDirective",
                    "type": "directive"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { PATHS } from '../../../app.routes';\nimport { getRouterLink } from '../../../shared/services/custom-routing/constants';\nimport { TextDirective } from '../../../shared/directives/text/text.directive';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\n\n@Component({\n  standalone: true,\n  selector: 'app-organization',\n  imports: [TextDirective, RouterLink, RouterLinkActive],\n  templateUrl: './organization.component.html',\n  styleUrl: './organization.component.scss',\n})\nexport class OrganizationComponent {\n  PATHS = PATHS;\n  getRouterLink = getRouterLink;\n}\n",
            "styleUrl": "./organization.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a\n  appText\n  variant=\"paragraph\"\n  [routerLink]=\"getRouterLink(PATHS.ADD_MEMBERS)\"\n  routerLinkActive=\"active\"\n  ariaCurrentWhenActive=\"page\"\n>\n  Add Members</a\n>\n"
        },
        {
            "name": "OrganizationsComponent",
            "id": "component-OrganizationsComponent-0df12874c8035a6e20651f0e16205d0fe6345a7f7061bccd7db14dda112dbe3426691c00e789a2fd45b5490f9467b64393d28d5a3730e2d0aed31b332587a5ba",
            "file": "src/app/containers/organizations/organizations.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-organizations",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./organizations.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getRouterLink",
                    "defaultValue": "getRouterLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "PATHS",
                    "defaultValue": "PATHS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TextDirective",
                    "type": "directive"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { TextDirective } from '../../shared/directives/text/text.directive';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\nimport { PATHS } from '../../app.routes';\nimport { getRouterLink } from '../../shared/services/custom-routing/constants';\n\n@Component({\n  standalone: true,\n  selector: 'app-organizations',\n  imports: [TextDirective, RouterLink, RouterLinkActive],\n  templateUrl: './organizations.component.html',\n  styleUrl: './organizations.component.scss',\n})\nexport class OrganizationsComponent {\n  PATHS = PATHS;\n  getRouterLink = getRouterLink;\n}\n",
            "styleUrl": "./organizations.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a\n  appText\n  variant=\"paragraph\"\n  [routerLink]=\"getRouterLink(PATHS.CREATE_ORGANIZATION)\"\n  routerLinkActive=\"active\"\n  ariaCurrentWhenActive=\"page\"\n>\n  Create Organization</a\n>\n"
        },
        {
            "name": "SurveyComponent",
            "id": "component-SurveyComponent-a3592ffecf9a472028657f1a4f60e3f7942756e19d066937271c1aa134c0c3080fea22871933db8fe9823dc1ecd9dee6b1996f416a79d5c39ba8d640df3a67e1",
            "file": "src/app/containers/survey/survey.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-survey",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./survey.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-survey',\n  imports: [],\n  templateUrl: './survey.component.html',\n  styleUrl: './survey.component.scss'\n})\nexport class SurveyComponent {\n\n}\n",
            "styleUrl": "./survey.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>survey works!</p>\n"
        },
        {
            "name": "SurveysComponent",
            "id": "component-SurveysComponent-de92f1f8bac00ae59c797be1670bee4e9054aef27311ad639a6efdf25fb91806793f1edf9504396ad944cd374cb91430420c7b2f589af02e412131195ca14f19",
            "file": "src/app/containers/surveys/surveys.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-surveys",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./surveys.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  standalone: true,\n  selector: 'app-surveys',\n  imports: [],\n  templateUrl: './surveys.component.html',\n  styleUrl: './surveys.component.scss',\n})\nexport class SurveysComponent {}\n",
            "styleUrl": "./surveys.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<h4>ECHO SURVEYS</h4>\n"
        },
        {
            "name": "ToastComponent",
            "id": "component-ToastComponent-83e1ffc35b29dd192c3a469df7da8f66d22c7a22ece5ae0ce5369541071a1ecc07b1a0219ed7537804f58558ef4e24fce69a8367364f341b33b2babe270ed004",
            "file": "src/app/shared/containers/toast/toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toast",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toast.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "toasts",
                    "defaultValue": "computed(() => this.toastService.toasts().reverse())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "toastService",
                    "defaultValue": "inject(ToastService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "UpperCasePipe",
                    "type": "pipe"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "TextDirective",
                    "type": "directive"
                },
                {
                    "name": "ButtonDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, inject } from '@angular/core';\nimport { ToastService } from './toast.service';\nimport { DatePipe, UpperCasePipe } from '@angular/common';\nimport { TextDirective } from '../../directives/text/text.directive';\nimport { ButtonDirective } from '../../directives/button/button.directive';\n\n@Component({\n  standalone: true,\n  selector: 'app-toast',\n  imports: [UpperCasePipe, DatePipe, TextDirective, ButtonDirective],\n  templateUrl: './toast.component.html',\n  styleUrl: './toast.component.scss',\n})\nexport class ToastComponent {\n  toastService = inject(ToastService);\n\n  toasts = computed(() => this.toastService.toasts().reverse());\n}\n",
            "styleUrl": "./toast.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"toast-container\">\n  <div class=\"toast__button__container\">\n    @if(toastService.isOpen()){ @if(toasts().length > 0) {\n    <button\n      appButton\n      [variant]=\"'default'\"\n      class=\"toast__button\"\n      (click)=\"toastService.clear()\"\n    >\n      Clear\n    </button>\n    }\n\n    <button\n      appButton\n      [variant]=\"'default'\"\n      class=\"toast__button\"\n      (click)=\"toastService.setIsOpen(false)\"\n    >\n      Close\n    </button>\n\n    } @else {\n    <button\n      appButton\n      [variant]=\"'default'\"\n      class=\"toast__button\"\n      (click)=\"toastService.setIsOpen(true)\"\n    >\n      Messages\n    </button>\n    }\n  </div>\n\n  @if(toastService.isOpen()) { @for (toast of toasts(); track $index; let idx =\n  $index) {\n  <div class=\"toast\">\n    <span appText [variant]=\"'info-sm'\" class=\"toast__dateTime\"\n      >{{ toast.dateTime | date : \"shortTime\" }}\n    </span>\n\n    <div class=\"toast__info\">\n      @if (toast.correlation_id) {\n      <small appText [variant]=\"'info-sm'\" class=\"toast__info__message\">\n        {{ toast.correlation_id }}\n      </small>\n      }\n\n      <h4\n        appText\n        [variant]=\"'title-sm'\"\n        class=\"toast__info__header\"\n        [class.toast__info__header--error]=\"toast.type === 'error'\"\n        [class.toast__info__header--success]=\"toast.type === 'success'\"\n        [class.toast__info__header--warning]=\"toast.type === 'warning'\"\n      >\n        {{ toast.type | uppercase }}\n      </h4>\n\n      <p appText [variant]=\"'paragraph'\" class=\"toast__info__message\">\n        {{ toast.message }}\n      </p>\n    </div>\n  </div>\n  } }\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideHttpClient(\n      withFetch(),\n      withInterceptors([activeHttpCountInterceptor])\n    ),\n    provideRouter(routes),\n    {\n      provide: LocationStrategy,\n      useClass: env.isEmbedded ? CustomLocationStrategy : PathLocationStrategy,\n    },\n    provideClientHydration(),\n    provideServiceWorker('ngsw-worker.js', {\n      enabled: !isDevMode(),\n      registrationStrategy: 'registerWhenStable:30000',\n    }),\n  ],\n}"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(isAuthPage = false): CanActivateFn => {\n  return function (\n    activatedRouteSnapshot: ActivatedRouteSnapshot\n  ): UrlTree | boolean | Observable<UrlTree | boolean> {\n    const authService = inject(AuthService);\n    const localStorageService = inject(LocalStorageService);\n    const platformId = inject(PLATFORM_ID);\n    const router = inject(Router);\n\n    const currentPath = activatedRouteSnapshot.url[0]?.path;\n\n    if (isPlatformServer(platformId)) {\n      return false;\n    }\n\n    if (authService.isAccessTokenExpired()) {\n      console.log('Access Token Expired');\n      authService.isAuthed.set(false);\n\n      const refresh_token =\n        localStorageService.get<IStorage['echo.tokens']>(\n          'echo.tokens'\n        )?.refresh_token;\n      const email =\n        localStorageService.get<IStorage['echo.user']>('echo.user')?.email;\n\n      if (isAuthPage && (!email || !refresh_token)) {\n        return true;\n      }\n\n      if (!email || !refresh_token) {\n        router.navigate(getRouterLink(PATHS.LOGIN), {\n          state: { returnUrl: currentPath },\n        });\n        return false;\n      }\n\n      return authService.refreshAccessToken(email).pipe(\n        map(() => {\n          if (\n            currentPath === PATHS.LOGIN ||\n            currentPath === PATHS.COMPLETE_LOGIN ||\n            currentPath === PATHS.REGISTER ||\n            currentPath === PATHS.VERIFY_EMAIL\n          ) {\n            router.navigate(getRouterLink(PATHS.HOME));\n          }\n          return true;\n        }),\n        catchError(() => {\n          authService.isAuthed.set(false);\n          if (isAuthPage) {\n            return of(true);\n          } else {\n            router.navigate(getRouterLink(PATHS.LOGIN));\n          }\n          return of(false);\n        })\n      );\n    }\n\n    if (isAuthPage) {\n      router.navigate(getRouterLink(PATHS.HOME));\n    }\n\n    authService.isAuthed.set(true);\n    return true;\n  };\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "DEFAULT_THEME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/theme/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  colors: {\n    primary: '#535358',\n    secondary: '#141414',\n    background: 'white',\n\n    textPrimary: '#535358',\n    textHeader: '#201f2d',\n    textSecondary: '#8e8e99',\n    textSecondaryLight: '#aeaeb4',\n\n    lightGrey1: '#dddde7',\n    lightGrey2: '#e9e9e9',\n    border: '#aeaeb4',\n\n    textLink: '#1b07f2',\n\n    successLight: '#21b04c0d',\n    errorLight: '#ee726f1a',\n    error: '#ee726f',\n    success: '#22b14d',\n    notice: '#f8d943',\n\n    black: 'black',\n    white: 'white',\n\n    primaryHover: '#3c3c3d',\n    primaryActive: '#2c2c2d',\n    focusRing: '#1b07f2',\n\n    info: '#17a2b8',\n    warning: '#f39c12',\n\n    overlayLight: 'rgba(0, 0, 0, 0.1)',\n    overlayDark: 'rgba(0, 0, 0, 0.5)',\n  },\n\n  typography: {\n    fontFamily:\n      'line-to-circular, Helvetica Neue, Helvetica, Arial, sans-serif',\n    bodySize: '16px',\n    titleSize: '22px',\n    captionSize: '12px',\n    bodyLineHeight: '1.5',\n    titleLineHeight: '1.2',\n    captionLineHeight: '1.4',\n\n    // Missing Typography Tokens\n    h1Size: '32px', // Large heading size\n    h2Size: '28px', // Medium heading size\n    fontWeightLight: '300', // Lighter font weight\n    fontWeightBold: '700', // Bold font weight\n\n    // Letter Spacing\n    letterSpacingSmall: '-0.5px',\n    letterSpacingLarge: '1px',\n\n    // Responsive Typography\n    bodySizeSm: '14px', // Smaller body size for mobile\n    titleSizeSm: '20px', // Smaller title size for mobile\n  },\n\n  spacing: {\n    xs: '4px',\n    sm: '8px',\n    md: '16px',\n    lg: '24px',\n    xl: '32px',\n    xxl: '48px',\n\n    // Missing Spacing Tokens\n    nano: '1px',\n    micro: '2px',\n\n    // Responsive Spacing\n    smSpacing: '12px',\n    lgSpacing: '40px',\n\n    paddingXs: '4px',\n    paddingSm: '8px',\n    paddingMd: '16px',\n    paddingLg: '24px',\n    paddingXl: '32px',\n    paddingXxl: '48px',\n\n    marginXs: '4px',\n    marginSm: '8px',\n    marginMd: '16px',\n    marginLg: '24px',\n    marginXl: '32px',\n    marginXxl: '48px',\n  },\n\n  borderRadius: {\n    small: '4px',\n    medium: '8px',\n    large: '16px',\n    pill: '9999px',\n  },\n\n  borderWidth: {\n    thin: '1px',\n    medium: '2px',\n    thick: '3px',\n  },\n\n  shadows: {\n    subtle: '0px 1px 2px rgba(0, 0, 0, 0.12)',\n    medium: '0px 4px 8px rgba(0, 0, 0, 0.15)',\n    strong: '0px 10px 20px rgba(0, 0, 0, 0.2)',\n\n    shadowActive: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n    shadowHover: '0px 4px 8px rgba(0, 0, 0, 0.2)',\n  },\n\n  animation: {\n    fast: '150ms',\n    medium: '300ms',\n    slow: '500ms',\n\n    easeIn: 'cubic-bezier(0.42, 0, 1, 1)',\n    easeOut: 'cubic-bezier(0, 0, 0.58, 1)',\n  },\n\n  breakpoints: {\n    breakpointSm: '576px',\n    breakpointMd: '768px',\n    breakpointLg: '1024px',\n    breakpointXl: '1200px',\n  },\n\n  gradients: {\n    gradientPrimary: 'linear-gradient(to right, #22b14d, #1b07f2)', // Example gradient\n    gradientBackground: 'linear-gradient(to top, #fff, #f8f8f8)', // Example background gradient\n  },\n\n  zIndex: {\n    zIndexModal: '1050',\n    zIndexTooltip: '1060',\n    zIndexDropdown: '1040',\n  },\n}"
            },
            {
                "name": "env",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  backendApi: '/api',\n  isEmbedded,\n}"
            },
            {
                "name": "env",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  backendApi: (prefix as string).includes('ui')\n    ? `https://d1qq4jkpje1gtx.cloudfront.net${prefix.replace('ui', '/server')}`\n    : `https://d1qq4jkpje1gtx.cloudfront.net/prod`,\n  isEmbedded,\n}"
            },
            {
                "name": "isEmbedded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "false"
            },
            {
                "name": "jwtInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interceptors/jwt.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\n  const localStorageServive = inject(LocalStorageService);\n\n  const tokens: ITokens = localStorageServive.get('echo.tokens');\n\n  const with_auth_request = req.clone({\n    setHeaders: {\n      Authorization: `${tokens.access_token}`,\n    },\n  });\n\n  return next(with_auth_request);\n}"
            },
            {
                "name": "ORGANIZATION_PATHS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/containers/organizations/organization.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ORGANIZATIONS: 'organizations',\n  CREATE_ORGANIZATION: 'organizations/create',\n  ORGANIZATION: 'organizations/organization',\n  ADD_MEMBERS: 'organizations/add-members',\n}"
            },
            {
                "name": "PATHS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  HOME: 'home',\n  LOGIN: 'login',\n  COMPLETE_LOGIN: 'complete-login',\n  REGISTER: 'register',\n  VERIFY_EMAIL: 'verify-email',\n  SURVEYS: 'surveys',\n  SURVEY: 'surveys/survey',\n  ...ORGANIZATION_PATHS,\n}"
            },
            {
                "name": "prefix",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "''"
            },
            {
                "name": "ROUTER_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/custom-routing/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'echo'"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "[...organizationRoutes, ...baseRoutes].map((r) => {\n  if (r.redirectTo) {\n    return r;\n  } else {\n    return { ...r, ...(isEmbedded ? { outlet: ROUTER_NAME } : null) };\n  }\n})"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideServerRendering()\n  ]\n}"
            },
            {
                "name": "SUPPORTED_LANGUAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/language/language.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { key: 'LANGUAGES.ENGLISH', value: 'en' },\n  { key: 'LANGUAGES.GERMAN', value: 'de' },\n]"
            }
        ],
        "functions": [
            {
                "name": "activeHttpCountInterceptor",
                "file": "src/app/shared/interceptors/active-http-count.interceptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "req",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<HttpEvent<>>",
                "jsdoctags": [
                    {
                        "name": "req",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRouterLink",
                "file": "src/app/shared/services/custom-routing/constants.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getTranslation",
                "file": "src/app/shared/services/translate/utils/translate.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "object",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "keys",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "i",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "returnType": "IGetTranslation",
                "jsdoctags": [
                    {
                        "name": "object",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "keys",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "keyNotFoundError",
                "file": "src/app/shared/services/translate/utils/translate.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "provideTranslate",
                "file": "src/app/shared/services/translate/services/translate.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ITranslateConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ITranslateConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "provideTranslateTestModule",
                "file": "src/app/shared/services/translate/services/translate.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "replacePlaceholders",
                "file": "src/app/shared/services/translate/utils/translate.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "replacements",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "input",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "replacements",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "IVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"cta\"",
                "file": "src/app/shared/directives/button/button.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"paragraph\" | \"paragraph-bold\" | \"info\" | \"info-sm\" | \"title\" | \"title-sm\"",
                "file": "src/app/shared/directives/text/text.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/shared/directives/text-input/text-input.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideHttpClient(\n      withFetch(),\n      withInterceptors([activeHttpCountInterceptor])\n    ),\n    provideRouter(routes),\n    {\n      provide: LocationStrategy,\n      useClass: env.isEmbedded ? CustomLocationStrategy : PathLocationStrategy,\n    },\n    provideClientHydration(),\n    provideServiceWorker('ngsw-worker.js', {\n      enabled: !isDevMode(),\n      registrationStrategy: 'registerWhenStable:30000',\n    }),\n  ],\n}"
                }
            ],
            "src/app/shared/guards/auth.guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(isAuthPage = false): CanActivateFn => {\n  return function (\n    activatedRouteSnapshot: ActivatedRouteSnapshot\n  ): UrlTree | boolean | Observable<UrlTree | boolean> {\n    const authService = inject(AuthService);\n    const localStorageService = inject(LocalStorageService);\n    const platformId = inject(PLATFORM_ID);\n    const router = inject(Router);\n\n    const currentPath = activatedRouteSnapshot.url[0]?.path;\n\n    if (isPlatformServer(platformId)) {\n      return false;\n    }\n\n    if (authService.isAccessTokenExpired()) {\n      console.log('Access Token Expired');\n      authService.isAuthed.set(false);\n\n      const refresh_token =\n        localStorageService.get<IStorage['echo.tokens']>(\n          'echo.tokens'\n        )?.refresh_token;\n      const email =\n        localStorageService.get<IStorage['echo.user']>('echo.user')?.email;\n\n      if (isAuthPage && (!email || !refresh_token)) {\n        return true;\n      }\n\n      if (!email || !refresh_token) {\n        router.navigate(getRouterLink(PATHS.LOGIN), {\n          state: { returnUrl: currentPath },\n        });\n        return false;\n      }\n\n      return authService.refreshAccessToken(email).pipe(\n        map(() => {\n          if (\n            currentPath === PATHS.LOGIN ||\n            currentPath === PATHS.COMPLETE_LOGIN ||\n            currentPath === PATHS.REGISTER ||\n            currentPath === PATHS.VERIFY_EMAIL\n          ) {\n            router.navigate(getRouterLink(PATHS.HOME));\n          }\n          return true;\n        }),\n        catchError(() => {\n          authService.isAuthed.set(false);\n          if (isAuthPage) {\n            return of(true);\n          } else {\n            router.navigate(getRouterLink(PATHS.LOGIN));\n          }\n          return of(false);\n        })\n      );\n    }\n\n    if (isAuthPage) {\n      router.navigate(getRouterLink(PATHS.HOME));\n    }\n\n    authService.isAuthed.set(true);\n    return true;\n  };\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideServerRendering()\n  ]\n}"
                }
            ],
            "src/app/shared/services/theme/constants.ts": [
                {
                    "name": "DEFAULT_THEME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/theme/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  colors: {\n    primary: '#535358',\n    secondary: '#141414',\n    background: 'white',\n\n    textPrimary: '#535358',\n    textHeader: '#201f2d',\n    textSecondary: '#8e8e99',\n    textSecondaryLight: '#aeaeb4',\n\n    lightGrey1: '#dddde7',\n    lightGrey2: '#e9e9e9',\n    border: '#aeaeb4',\n\n    textLink: '#1b07f2',\n\n    successLight: '#21b04c0d',\n    errorLight: '#ee726f1a',\n    error: '#ee726f',\n    success: '#22b14d',\n    notice: '#f8d943',\n\n    black: 'black',\n    white: 'white',\n\n    primaryHover: '#3c3c3d',\n    primaryActive: '#2c2c2d',\n    focusRing: '#1b07f2',\n\n    info: '#17a2b8',\n    warning: '#f39c12',\n\n    overlayLight: 'rgba(0, 0, 0, 0.1)',\n    overlayDark: 'rgba(0, 0, 0, 0.5)',\n  },\n\n  typography: {\n    fontFamily:\n      'line-to-circular, Helvetica Neue, Helvetica, Arial, sans-serif',\n    bodySize: '16px',\n    titleSize: '22px',\n    captionSize: '12px',\n    bodyLineHeight: '1.5',\n    titleLineHeight: '1.2',\n    captionLineHeight: '1.4',\n\n    // Missing Typography Tokens\n    h1Size: '32px', // Large heading size\n    h2Size: '28px', // Medium heading size\n    fontWeightLight: '300', // Lighter font weight\n    fontWeightBold: '700', // Bold font weight\n\n    // Letter Spacing\n    letterSpacingSmall: '-0.5px',\n    letterSpacingLarge: '1px',\n\n    // Responsive Typography\n    bodySizeSm: '14px', // Smaller body size for mobile\n    titleSizeSm: '20px', // Smaller title size for mobile\n  },\n\n  spacing: {\n    xs: '4px',\n    sm: '8px',\n    md: '16px',\n    lg: '24px',\n    xl: '32px',\n    xxl: '48px',\n\n    // Missing Spacing Tokens\n    nano: '1px',\n    micro: '2px',\n\n    // Responsive Spacing\n    smSpacing: '12px',\n    lgSpacing: '40px',\n\n    paddingXs: '4px',\n    paddingSm: '8px',\n    paddingMd: '16px',\n    paddingLg: '24px',\n    paddingXl: '32px',\n    paddingXxl: '48px',\n\n    marginXs: '4px',\n    marginSm: '8px',\n    marginMd: '16px',\n    marginLg: '24px',\n    marginXl: '32px',\n    marginXxl: '48px',\n  },\n\n  borderRadius: {\n    small: '4px',\n    medium: '8px',\n    large: '16px',\n    pill: '9999px',\n  },\n\n  borderWidth: {\n    thin: '1px',\n    medium: '2px',\n    thick: '3px',\n  },\n\n  shadows: {\n    subtle: '0px 1px 2px rgba(0, 0, 0, 0.12)',\n    medium: '0px 4px 8px rgba(0, 0, 0, 0.15)',\n    strong: '0px 10px 20px rgba(0, 0, 0, 0.2)',\n\n    shadowActive: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n    shadowHover: '0px 4px 8px rgba(0, 0, 0, 0.2)',\n  },\n\n  animation: {\n    fast: '150ms',\n    medium: '300ms',\n    slow: '500ms',\n\n    easeIn: 'cubic-bezier(0.42, 0, 1, 1)',\n    easeOut: 'cubic-bezier(0, 0, 0.58, 1)',\n  },\n\n  breakpoints: {\n    breakpointSm: '576px',\n    breakpointMd: '768px',\n    breakpointLg: '1024px',\n    breakpointXl: '1200px',\n  },\n\n  gradients: {\n    gradientPrimary: 'linear-gradient(to right, #22b14d, #1b07f2)', // Example gradient\n    gradientBackground: 'linear-gradient(to top, #fff, #f8f8f8)', // Example background gradient\n  },\n\n  zIndex: {\n    zIndexModal: '1050',\n    zIndexTooltip: '1060',\n    zIndexDropdown: '1040',\n  },\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "env",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  backendApi: '/api',\n  isEmbedded,\n}"
                },
                {
                    "name": "isEmbedded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "false"
                },
                {
                    "name": "prefix",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "''"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "env",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  backendApi: (prefix as string).includes('ui')\n    ? `https://d1qq4jkpje1gtx.cloudfront.net${prefix.replace('ui', '/server')}`\n    : `https://d1qq4jkpje1gtx.cloudfront.net/prod`,\n  isEmbedded,\n}"
                }
            ],
            "src/app/shared/interceptors/jwt.interceptor.ts": [
                {
                    "name": "jwtInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interceptors/jwt.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\n  const localStorageServive = inject(LocalStorageService);\n\n  const tokens: ITokens = localStorageServive.get('echo.tokens');\n\n  const with_auth_request = req.clone({\n    setHeaders: {\n      Authorization: `${tokens.access_token}`,\n    },\n  });\n\n  return next(with_auth_request);\n}"
                }
            ],
            "src/app/containers/organizations/organization.routes.ts": [
                {
                    "name": "ORGANIZATION_PATHS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/containers/organizations/organization.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ORGANIZATIONS: 'organizations',\n  CREATE_ORGANIZATION: 'organizations/create',\n  ORGANIZATION: 'organizations/organization',\n  ADD_MEMBERS: 'organizations/add-members',\n}"
                }
            ],
            "src/app/app.routes.ts": [
                {
                    "name": "PATHS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  HOME: 'home',\n  LOGIN: 'login',\n  COMPLETE_LOGIN: 'complete-login',\n  REGISTER: 'register',\n  VERIFY_EMAIL: 'verify-email',\n  SURVEYS: 'surveys',\n  SURVEY: 'surveys/survey',\n  ...ORGANIZATION_PATHS,\n}"
                },
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "[...organizationRoutes, ...baseRoutes].map((r) => {\n  if (r.redirectTo) {\n    return r;\n  } else {\n    return { ...r, ...(isEmbedded ? { outlet: ROUTER_NAME } : null) };\n  }\n})"
                }
            ],
            "src/app/shared/services/custom-routing/constants.ts": [
                {
                    "name": "ROUTER_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/custom-routing/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'echo'"
                }
            ],
            "src/app/shared/services/language/language.service.ts": [
                {
                    "name": "SUPPORTED_LANGUAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/language/language.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { key: 'LANGUAGES.ENGLISH', value: 'en' },\n  { key: 'LANGUAGES.GERMAN', value: 'de' },\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/interceptors/active-http-count.interceptor.ts": [
                {
                    "name": "activeHttpCountInterceptor",
                    "file": "src/app/shared/interceptors/active-http-count.interceptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<HttpEvent<>>",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/services/custom-routing/constants.ts": [
                {
                    "name": "getRouterLink",
                    "file": "src/app/shared/services/custom-routing/constants.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/services/translate/utils/translate.utils.ts": [
                {
                    "name": "getTranslation",
                    "file": "src/app/shared/services/translate/utils/translate.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keys",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "returnType": "IGetTranslation",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyNotFoundError",
                    "file": "src/app/shared/services/translate/utils/translate.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replacePlaceholders",
                    "file": "src/app/shared/services/translate/utils/translate.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "replacements",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "replacements",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/services/translate/services/translate.service.ts": [
                {
                    "name": "provideTranslate",
                    "file": "src/app/shared/services/translate/services/translate.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITranslateConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITranslateConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "provideTranslateTestModule",
                    "file": "src/app/shared/services/translate/services/translate.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/shared/directives/button/button.directive.ts": [
                {
                    "name": "IVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"cta\"",
                    "file": "src/app/shared/directives/button/button.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/directives/text/text.directive.ts": [
                {
                    "name": "IVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"paragraph\" | \"paragraph-bold\" | \"info\" | \"info-sm\" | \"title\" | \"title-sm\"",
                    "file": "src/app/shared/directives/text/text.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/directives/text-input/text-input.directive.ts": [
                {
                    "name": "IVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/shared/directives/text-input/text-input.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PATHS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/auth-page/auth-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/homepage/homepage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomepageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/organizations/create-organization/create-organization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateOrganizationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/organizations/create-organization/create-organization.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICreateOrganizationForm",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/organizations/create-organization/create-organization.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMember",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/organizations/organization.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ORGANIZATION_PATHS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/organizations/organization/add-members/add-members.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMembersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/organizations/organization/add-members/add-members.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICreateOrganizationForm",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/organizations/organization/add-members/add-members.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMember",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/organizations/organization/organization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrganizationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/organizations/organizations.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrganizationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/survey/survey.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SurveyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/surveys/surveys.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SurveysComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/containers/language-picker/language-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LanguagePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/containers/loading-circle/loading-circle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingCircleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/containers/loading-screen/loading-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/containers/loading-screen/loading-screen.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingScreenService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/containers/nav/nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/containers/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/containers/toast/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/containers/toast/toast.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToast",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/button/button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ButtonDirective",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/button/button.directive.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/checkbox/checkbox.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CheckboxDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/text-input/text-input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TextInputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/text-input/text-input.directive.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/text/text.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TextDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/text/text.directive.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptors/active-http-count.interceptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "activeHttpCountInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptors/jwt.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "jwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/form-error-message.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FormErrorMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/localize.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LocalizePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITokens",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/custom-routing/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/custom-routing/breadcrumb/breadcrumb.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BreadcrumbService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/custom-routing/constants.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRouterLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/custom-routing/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTER_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/custom-routing/custom-location-strategy/custom-location-strategy.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomLocationStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/language/language.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LanguageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/language/language.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUPPORTED_LANGUAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/storage/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/storage/session-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/storage/storage.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStorage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/storage/storage.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserProfile",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/storage/storage.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StorageService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/theme/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_THEME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/theme/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/translate/models/translate.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGetTranslation",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/translate/models/translate.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITranslateConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/translate/pipes/translate.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TranslatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/translate/services/mockTranslateService.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockTranslateService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/translate/services/translate.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslateService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/translate/services/translate.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "provideTranslate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/translate/services/translate.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "provideTranslateTestModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/translate/utils/translate.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getTranslation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/translate/utils/translate.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "keyNotFoundError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/translate/utils/translate.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "replacePlaceholders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "env",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isEmbedded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prefix",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "env",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}